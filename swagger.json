{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This application serves the data for the Malwarebytes Cloud system",
    "title": "Malwarebytes Cloud API",
    "termsOfService": "Internal use only",
    "contact": {
      "name": "Nebula Core",
      "email": "DL-NebulaTeamCore@malwarebytes.com"
    },
    "version": "0.0.1"
  },
  "host": "nebula.malwarebytesdev.com",
  "basePath": "/api/v1",
  "paths": {
    "/account": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "Gets the account for this user. Requires a user authentication token.",
        "operationId": "getUserAccount",
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/account/invite": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Sends invites to the users provided. Requires a user authentication token.",
        "operationId": "inviteUsers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "EmailAddresses",
            "description": "Emails of users to invite",
            "name": "emails",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/account/preferences/{option_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "options"
        ],
        "summary": "Gets an option for the account. Requires a user authentication token.",
        "operationId": "getAccountPreferences",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "OptionName",
            "description": "The option name to lookup",
            "name": "option_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "option",
            "schema": {
              "$ref": "#/definitions/option"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "options"
        ],
        "summary": "Creates or updates an account option. Requires a user authentication token.",
        "operationId": "putAccountPreferences",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TableName",
            "name": "table_name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OptionName",
            "name": "option_name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OptionValue",
            "name": "option_value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "option",
            "schema": {
              "$ref": "#/definitions/option"
            }
          },
          "400": {
            "description": "Bad Request",
            "$ref": "#/responses/httpError"
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/responses/httpError"
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "Creates or updates an account option. Requires a user authentication token.",
        "operationId": "deleteAccountPreferences",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "The ID to use to find record if it exists",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OptionName",
            "name": "option_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "option",
            "schema": {
              "$ref": "#/definitions/option"
            }
          },
          "400": {
            "description": "Bad Request",
            "$ref": "#/responses/httpError"
          },
          "401": {
            "description": "Unauthorized",
            "$ref": "#/responses/httpError"
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/account/saml": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Gets the SAML details of the current account. Requires a user authentication token.",
        "operationId": "account",
        "responses": {
          "200": {
            "description": "accountSamlDetails",
            "schema": {
              "$ref": "#/definitions/accountSamlDetails"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/account/saml/idp/metadata": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Retrieves the users current IDP Metadata. Requires a user authentication token.",
        "operationId": "account",
        "responses": {
          "200": {
            "description": "accountSamlDetails",
            "schema": {
              "$ref": "#/definitions/accountSamlDetails"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Requires a user authentication token.",
        "operationId": "account",
        "responses": {
          "201": {
            "description": "accountSamlDetails",
            "schema": {
              "$ref": "#/definitions/accountSamlDetails"
            }
          },
          "204": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Takes in a Metadata file to create or update the Identity Provider.",
        "operationId": "account",
        "responses": {
          "201": {
            "description": "accountSamlDetails",
            "schema": {
              "$ref": "#/definitions/accountSamlDetails"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Requires a user authentication token.",
        "operationId": "account",
        "responses": {
          "204": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/account/saml/settings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "Searches for SSO User Profile and updates it if exists. Requires a user authentication token.",
        "operationId": "samlSettings",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Enabled",
            "name": "enabled",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "StrictMode",
            "name": "strict_mode",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "JITProvisioning",
            "name": "jit_provisioning",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "ServiceProviderInitiated",
            "name": "service_provider_initiated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "accountSamlDetails",
            "schema": {
              "$ref": "#/definitions/accountSamlDetails"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/account/saml/sp/metadata": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Gets the SP Metadata of the current account. Requires a user authentication token.",
        "operationId": "account",
        "responses": {
          "400": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/accounts/": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "Updates the account for the current user. Requires a user authentication token.",
        "operationId": "updateUserAccount",
        "parameters": [
          {
            "x-go-name": "DisplayName",
            "description": "New display name for the account",
            "name": "name",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/accounts/:account_id/executive-report": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Returns report URL. Requires private API authentication token.",
        "operationId": "generateReports",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "ReportPeriodStart",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "ReportPeriodEnd",
            "name": "end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {},
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/api/v1/account/ad/machines": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates the AD Machine Group map. User authentication token required. Must be DND tool",
        "tags": [
          "account",
          "machines",
          "adsync"
        ],
        "operationId": "updateAdMap",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "MachineObjectID",
            "name": "machine_object_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OUObjectID",
            "name": "ou_object_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/changepassword": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "auth",
          "password"
        ],
        "summary": "Changes the current user's password. Requires a user authentication token.",
        "operationId": "changePassword",
        "parameters": [
          {
            "type": "string",
            "format": "password",
            "x-go-name": "OldPassword",
            "description": "User's existing password",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "password",
            "x-go-name": "NewPassword",
            "description": "User's new password",
            "name": "new_password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/completechangepassword": {
      "post": {
        "description": "Completes a password change request",
        "tags": [
          "auth",
          "password"
        ],
        "operationId": "completeChangePassword",
        "parameters": [
          {
            "type": "string",
            "format": "password",
            "x-go-name": "Password",
            "description": "New password",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Token",
            "description": "Password change token",
            "name": "token",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/impersonation": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Logs in as the user identified in the token if the token is still valid and\nthe user matches the email provided. Requires an impersonation token",
        "tags": [
          "auth"
        ],
        "operationId": "impersonationLogin",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "x-go-name": "Email",
            "description": "Email address of user to login",
            "name": "email",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "$ref": "#/definitions/login"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/initiate": {
      "post": {
        "description": "Either continues the login process or redirects to a SAML IDP",
        "tags": [
          "auth"
        ],
        "operationId": "authInitiate",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "x-go-name": "Email",
            "description": "Email address of user to login",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid4",
            "x-go-name": "AccountID",
            "description": "ID of account to log the user into",
            "name": "account_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "202": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/initpasswordchange": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Initiates a password change for the current user. Sends an email to the\ncurrent user to continue the process. Requires a user authentication token.",
        "tags": [
          "auth",
          "password"
        ],
        "operationId": "initPasswordChange",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/initpasswordreset": {
      "post": {
        "description": "Initiates a password reset",
        "tags": [
          "auth",
          "password"
        ],
        "operationId": "initPasswordReset",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "x-go-name": "EmailAddress",
            "description": "Email address identifying user to reset password for",
            "name": "email",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "description": "Logs the user in and returns auth and refresh tokens",
        "tags": [
          "auth"
        ],
        "operationId": "login",
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "$ref": "#/definitions/login"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/otp/setup": {
      "post": {
        "description": "Confirms OTP setup",
        "tags": [
          "auth",
          "otp"
        ],
        "operationId": "confirmOtpSetup",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "OTP",
            "description": "OTP data",
            "name": "otp",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "OTPType",
            "name": "otp_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/otp/verify": {
      "post": {
        "description": "Verifies the OTP code",
        "tags": [
          "auth",
          "otp",
          "verifyOtp"
        ],
        "operationId": "verify",
        "responses": {
          "200": {
            "description": "apiTokens",
            "schema": {
              "$ref": "#/definitions/apiTokens"
            }
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/refreshmachine": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "auth"
        ],
        "summary": "Refreshes the current machine's auth tokens. Requires a machine refresh token.",
        "operationId": "refreshMachine",
        "responses": {
          "200": {
            "description": "apiTokens",
            "schema": {
              "$ref": "#/definitions/apiTokens"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/refreshuser": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Refreshes the current user's auth tokens. Requires a user refresh token",
        "tags": [
          "auth"
        ],
        "operationId": "refreshUser",
        "responses": {
          "200": {
            "description": "apiTokens",
            "schema": {
              "$ref": "#/definitions/apiTokens"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/support_login": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Requires a support token",
        "tags": [
          "auth"
        ],
        "summary": "Logs in as a temporary support user with read-only access to the specified account.",
        "operationId": "supportLogin",
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "$ref": "#/definitions/login"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/validate/machine": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Validate user token",
        "tags": [
          "auth",
          "validate"
        ],
        "operationId": "validateMachineToken",
        "responses": {
          "200": {
            "description": "validateMachineAuthToken",
            "schema": {
              "$ref": "#/definitions/validateMachineAuthToken"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/auth/validate/user": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Validate user token",
        "tags": [
          "auth",
          "validate"
        ],
        "operationId": "validateUserToken",
        "responses": {
          "200": {
            "description": "validateUserAuthToken",
            "schema": {
              "$ref": "#/definitions/validateUserAuthToken"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/dashboard/jobs_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "dashboard",
          "jobs"
        ],
        "summary": "Gets the jobs summary for the dashboard. Requires a user authentication token.",
        "operationId": "jobsSummary",
        "responses": {
          "200": {
            "description": "jobDashboardSummary",
            "schema": {
              "$ref": "#/definitions/jobDashboardSummary"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/endpoint_counts": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Provides endpoint counts for the past 72 hours. Requires a user authentication token.",
        "operationId": "endpointCount",
        "responses": {
          "200": {
            "description": "dashboardCounts",
            "schema": {
              "$ref": "#/definitions/dashboardCounts"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/events": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "events"
        ],
        "summary": "Search for events matching the given parameters. Requires a user authentication token.",
        "operationId": "eventSearch",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Start",
            "description": "Time to start query",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "End",
            "description": "Time to stop query",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Identifier of the machine to search for events on",
            "name": "machine_id",
            "in": "query"
          },
          {
            "enum": [
              1,
              " 2",
              " 3",
              " 4",
              " 5",
              " 6"
            ],
            "type": "integer",
            "format": "int64",
            "x-go-name": "Source",
            "description": "Which source to get events for",
            "name": "source",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SeverityFlags",
            "description": "Severity flags for the events\nbitflag: 1, 2, 4, 8",
            "name": "severity_flags",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SearchString",
            "description": "Search string for the events",
            "name": "search_string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "eventCollectionPresenter",
            "schema": {
              "$ref": "#/definitions/eventCollectionPresenter"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/events/{event_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Gets a specific event. Requires a user authentication token.",
        "operationId": "eventID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "event_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "event",
            "schema": {
              "$ref": "#/definitions/event"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/events_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "events"
        ],
        "summary": "Returns the summary of event counts. Requires a user authentication token.",
        "operationId": "eventsSummary",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Start",
            "description": "Time to start query",
            "name": "start",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "End",
            "description": "Time to stop query",
            "name": "end",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Interval",
            "description": "Time interval",
            "name": "interval",
            "in": "query",
            "required": true
          },
          {
            "pattern": "(day|hour)",
            "type": "string",
            "x-go-name": "Precision",
            "description": "Precision",
            "name": "precision",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "eventTimeSeries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eventTimeSeries"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/exclusion/exists": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Checks if an exclusion exists for the current account. Requires a user authentication token.",
        "operationId": "exclusions",
        "responses": {
          "200": {
            "description": "exclusion",
            "schema": {
              "$ref": "#/definitions/exclusion"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/exclusions": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "exclusions"
        ],
        "summary": "Gets the exclusions for the account. Requires a user authentication token.",
        "operationId": "getExclusions",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "TypeFilter",
            "name": "type",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Policies",
            "name": "policy_ids",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortBy",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortOrder",
            "name": "sort_order",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search_string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "exclusion",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/exclusion"
              }
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "exclusions"
        ],
        "summary": "Creates a new exclusion. Requires a user authentication token.",
        "operationId": "createExclusion",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Exploit",
            "name": "exploit_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Malware",
            "name": "malware_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Ransomware",
            "name": "ransomware_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Website",
            "name": "website_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SuspiciousActivity",
            "name": "suspicious_activity",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Value",
            "description": "Value of exclusion",
            "name": "value",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              13
            ],
            "type": "integer",
            "format": "int64",
            "x-go-name": "Type",
            "description": "Type of exclusion\n\nA value of:\n1: Exclusion for file path\n2: Exclusion for folder path\n3: Exclusion for wildcard path\n4: Exclusion for registry\n5: Exclusion for file extensions\n6: Exclusion for web domain\n7: Exclusion for web IP\n13: Exclusion for has",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Enabled",
            "description": "True if exclusion is enabled\n\nRequired doesn't appear to work with booleans\nbecause it rejects if you set the value to false",
            "name": "enabled",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Comment",
            "name": "comment",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "AccountLevel",
            "name": "account_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PolicyIDs",
            "name": "policy_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "exclusion",
            "schema": {
              "$ref": "#/definitions/exclusion"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "exclusions"
        ],
        "summary": "Deletes the given exclusions. Requires a user authentication token.",
        "operationId": "deleteExclusions",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/exclusions/{exclusion_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "exclusions"
        ],
        "summary": "Gets the given exclusion. Requires a user authentication token.",
        "operationId": "getExclusion",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ExclusionID",
            "description": "Exclusion ID to retrieves",
            "name": "exclusion_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "exclusion",
            "schema": {
              "$ref": "#/definitions/exclusion"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "exclusions"
        ],
        "summary": "Updates the given exclusion. Requires a user authentication token.",
        "operationId": "updateExclusion",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ExclusionID",
            "description": "Exclusion ID to retrieves",
            "name": "exclusion_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Exploit",
            "name": "exploit_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Malware",
            "name": "malware_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Ransomware",
            "name": "ransomware_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Website",
            "name": "website_protection",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SuspiciousActivity",
            "name": "suspicious_activity",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Value",
            "description": "Value of exclusion",
            "name": "value",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              13
            ],
            "type": "integer",
            "format": "int64",
            "x-go-name": "Type",
            "description": "Type of exclusion\n\nA value of:\n1: Exclusion for file path\n2: Exclusion for folder path\n3: Exclusion for wildcard path\n4: Exclusion for registry\n5: Exclusion for file extensions\n6: Exclusion for web domain\n7: Exclusion for web IP\n13: Exclusion for has",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Enabled",
            "description": "True if exclusion is enabled\n\nRequired doesn't appear to work with booleans\nbecause it rejects if you set the value to false",
            "name": "enabled",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Comment",
            "name": "comment",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "AccountLevel",
            "name": "account_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "PolicyIDs",
            "name": "policy_ids",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Etag",
            "description": "Exclusion Etag",
            "name": "etag",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "exclusion",
            "schema": {
              "$ref": "#/definitions/exclusion"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "exclusions"
        ],
        "summary": "Deletes the given exclusion. Requires a user authentication token.",
        "operationId": "deleteExclusion",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ExclusionID",
            "description": "Exclusion ID to retrieves",
            "name": "exclusion_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/generate_reports": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Returns report URL. Requires private API authentication token.",
        "operationId": "generateReports",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "ReportPeriodStart",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "ReportPeriodEnd",
            "name": "end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {},
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/generate_reports/:report_id": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Generates a report. Requires a user authentication token.",
        "operationId": "generateReport",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups"
        ],
        "summary": "Gets the groups for the current account. Requires a user authentication token.",
        "operationId": "getGroups",
        "responses": {
          "200": {
            "description": "group",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/group"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups"
        ],
        "summary": "Creates a new group with the given parameters. Requires a user authentication token.",
        "operationId": "createGroup",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of group",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "ID of the policy for this group",
            "name": "policy_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ParentID",
            "description": "ID of the group's parent group",
            "name": "parent_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OUObjectID",
            "description": "ActiveDirectory Object ID: must be DND",
            "name": "ou_object_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "group",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/groups/{group_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups"
        ],
        "summary": "Gets the given group. Requires a user authentication token.",
        "operationId": "getGroup",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Group ID to retrieves",
            "name": "group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "group",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups"
        ],
        "summary": "Updates the given group. Requires a user authentication token.",
        "operationId": "updateGroup",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Group ID to retrieves",
            "name": "group_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of group",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "ID of the policy for this group",
            "name": "policy_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ParentID",
            "description": "ID of the group's parent group",
            "name": "parent_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OUObjectID",
            "description": "ActiveDirectory Object ID: must be DND or admin",
            "name": "ou_object_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "group",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups"
        ],
        "summary": "Deletes the given group. Requires a user authentication token.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Group ID to retrieves",
            "name": "group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/groups/{group_id}/assign": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups"
        ],
        "summary": "Assign machines to the target group. Requires a user authentication token.",
        "operationId": "assignGroupToGroup",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "enum": [
              "MachineFilterTypeAll",
              " MachineFilterTypeOnline",
              " MachineFilterTypeOffline",
              " MachineFilterTypeOfflineOver7Days",
              " MachineFilterTypeOutdated"
            ],
            "type": "string",
            "format": "string",
            "x-go-name": "FilterType",
            "description": "Filter by machine status",
            "name": "filter_type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortBy",
            "description": "Field to sort by",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortASC",
            "description": "True to sort ascending",
            "name": "asc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Return machines in the given group",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "Return machines matching the given search query",
            "name": "search_string",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "StatusFilter",
            "description": "Returns machines matching the status filter",
            "name": "status_filter",
            "in": "query"
          },
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "TargetGroupID",
            "description": "Group ID to assign to",
            "name": "target_group_id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MachineIDs",
            "description": "Machines to add to the group",
            "name": "machine_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/groups/{group_id}/schedules": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups"
        ],
        "summary": "Updates schedules associated with this group. Requires a user authentication token.",
        "operationId": "updateGroupSchedule",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Group ID to retrieves",
            "name": "group_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "ScheduleIDs",
            "description": "Schedule IDs to assign",
            "name": "schedule_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Health check that responds with {\\\"component\\\":\\\"boolean\\\"}",
        "tags": [
          "health"
        ],
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "healthCheck",
            "schema": {
              "$ref": "#/definitions/healthCheck"
            }
          },
          "503": {
            "description": "healthCheck",
            "schema": {
              "$ref": "#/definitions/healthCheck"
            }
          }
        }
      }
    },
    "/health/check": {
      "get": {
        "description": "Health check",
        "tags": [
          "health"
        ],
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "healthCheck",
            "schema": {
              "$ref": "#/definitions/healthCheck"
            }
          }
        }
      }
    },
    "/health/check/{service_name}": {
      "get": {
        "description": "Service specific health check",
        "tags": [
          "health",
          "service"
        ],
        "operationId": "healthCheckService",
        "parameters": [
          {
            "type": "string",
            "description": "Name of service to check",
            "name": "ServiceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "healthCheck",
            "schema": {
              "$ref": "#/definitions/healthCheck"
            }
          },
          "404": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/health/ping": {
      "get": {
        "description": "Health check that responds with {\\\"pong\\\":\\\"pong\\\"}",
        "tags": [
          "health"
        ],
        "operationId": "healthPing",
        "responses": {
          "200": {
            "description": "ping",
            "schema": {
              "$ref": "#/definitions/ping"
            }
          }
        }
      }
    },
    "/installer/{:key}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "installers"
        ],
        "summary": "Gets the given custom installer for the account. Requires a user authentication token.",
        "operationId": "getInstaller",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Key",
            "description": "Key to retrieve",
            "name": "key",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "url",
            "schema": {
              "$ref": "#/definitions/url"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/installer_status": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "installers"
        ],
        "summary": "Gets the status of the custom installers for the account. Requires a user authentication token.",
        "operationId": "getInstallerStatus",
        "responses": {
          "200": {
            "description": "installer",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/installer"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/installers": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "installers"
        ],
        "summary": "Gets the status of the custom installers for the account. Requires a user authentication token.",
        "operationId": "getInstallerStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/DeprecatedAccountInstallerCollection"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Searches for jobs matching the given parameters. Requires a user authentication token.",
        "operationId": "jobSearch",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SearchString",
            "description": "String to match jobs against",
            "name": "search_string",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "x-go-name": "JobStatuses",
            "description": "Bitflag representing what statuses to search for\nbitflag: 1, 2, 4, 8, 16, 32, 64, 128",
            "name": "job_statuses",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Group to match jobs against",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine to match jobs against",
            "name": "machine_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "jobCollectionPresenter",
            "schema": {
              "$ref": "#/definitions/jobCollectionPresenter"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Issues a job to the specified machines. Requires a user authentication token.",
        "operationId": "issueJob",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "enum": [
              "MachineFilterTypeAll",
              " MachineFilterTypeOnline",
              " MachineFilterTypeOffline",
              " MachineFilterTypeOfflineOver7Days",
              " MachineFilterTypeOutdated"
            ],
            "type": "string",
            "format": "string",
            "x-go-name": "FilterType",
            "description": "Filter by machine status",
            "name": "filter_type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortBy",
            "description": "Field to sort by",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortASC",
            "description": "True to sort ascending",
            "name": "asc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Return machines in the given group",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "Return machines matching the given search query",
            "name": "search_string",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "StatusFilter",
            "description": "Returns machines matching the status filter",
            "name": "status_filter",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "MachineIDs",
            "description": "IDs of machines to issue a job to",
            "name": "machine_ids",
            "in": "query"
          },
          {
            "enum": [
              "\"command.policy.refresh\"",
              " \"command.threat.scan\"",
              " \"command.threat.quarantine.restore\"",
              " \"command.threat.quarantine.remove\"",
              " \"command.asset.reboot\"",
              " \"command.asset.refresh\"",
              " \"command.service.restart\"",
              " \"command.service.diag\""
            ],
            "type": "string",
            "x-go-name": "Command",
            "description": "Command to issue to the machines",
            "name": "command",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "RelayState",
            "description": "Relay State",
            "name": "relay_state",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Data",
            "description": "Data for the command",
            "name": "data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/jobs/{job_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Gets job matching the given parameters. Requires a user authentication token.",
        "operationId": "jobID",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "JobID",
            "description": "Job ID to retrieves",
            "name": "job_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "job",
            "schema": {
              "$ref": "#/definitions/job"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/jobs_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Gets the job summary (breakdown of counts). Requires a user authentication token.",
        "operationId": "jobSummary",
        "responses": {
          "200": {
            "description": "jobSummary",
            "schema": {
              "$ref": "#/definitions/jobSummary"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine": {
      "post": {
        "description": "Registers a new machine. Intended to be called by the endpoint agent only",
        "tags": [
          "machines",
          "endpoint"
        ],
        "operationId": "registerMachine",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AccountToken",
            "description": "AccountToken to identify the account this should be registered with",
            "name": "account_token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "UUID",
            "description": "Machine specific identifier generated by the agent. Used for deduplication",
            "name": "uuid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of the machine",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "Machine ID from Nebula, if available. Used for deduplication",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "MachineObjectID",
            "description": "MachineObjectID Active Directory id to search with",
            "name": "machine_object_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "RequestedGroupID",
            "description": "RequestedGroupID is the group id that the agent requested",
            "name": "requested_group_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "machineRegister",
            "schema": {
              "$ref": "#/definitions/machineRegister"
            }
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines",
          "endpoint"
        ],
        "summary": "Unregisters an existing machine. Intended to be called by the endpoint agent on uninstallation. Requires a machine authentication token.",
        "operationId": "unregisterMachine",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/exclusions": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Gets the exclusions for the given machine. Requires a machine authentication token.",
        "operationId": "exclusions",
        "responses": {
          "200": {
            "$ref": "#/responses/machineExclusions"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/isolation_image/:object_key": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "operationId": "getMachineIsolationImage",
        "responses": {
          "200": {
            "$ref": "#/responses/urlPresenter"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/policy": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Gets the policy for the current machine. Requires a machine authentication token.",
        "operationId": "getMachinePolicy",
        "responses": {
          "200": {
            "description": "policy",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/results": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines",
          "endpoint"
        ],
        "summary": "Handles endpoint result posting for various data. Requires a machine authentication token.",
        "operationId": "postResults",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "JobID",
            "description": "The ID of the job (if any) that resulted in this",
            "name": "job_id",
            "in": "query"
          },
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "The ID of the schedule (if any) that resulted in this",
            "name": "schedule_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ScheduleEtag",
            "description": "The ETag of the schedule (if any) that resulted in this",
            "name": "schedule_etag",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartedAtLocal",
            "description": "When the scan started.",
            "name": "started_at_local",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "DurationSeconds",
            "description": "How long the scan took, in seconds.",
            "name": "duration_seconds",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ResultType",
            "description": "The type of result this is\nAllowed Values:\nBOOMERANG_EVENT\nTHREAT_SCAN_RESULT\nQUARANTINE_LIST\nQUARANTINE_DELETE\nQUARANTINE_RESTORE\nASSET_INFORMATION\nAGENT_INFORMATION",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Data",
            "description": "The additional data for this result\nMust be formated as embedded JSON",
            "name": "data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/schedule": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "schedules"
        ],
        "summary": "Gets schedules for the current machine. Requires a machine authentication token.",
        "operationId": "getMachineSchedules",
        "responses": {
          "200": {
            "description": "schedule",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schedule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/sync": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines",
          "endpoint"
        ],
        "summary": "Gets jobs and updates etags for the endpoints. Requires a machine authentication token.",
        "operationId": "machineSync",
        "responses": {
          "200": {
            "description": "sync",
            "schema": {
              "$ref": "#/definitions/sync"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/threat_scan_results": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "(Deprecated)\nOld API to report scan results. Requires a machine authentication token.",
        "tags": [
          "machines",
          "endpoint"
        ],
        "operationId": "postThreatResults",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartedAtLocal",
            "description": "When the scan started.",
            "name": "started_at_local",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "DurationSeconds",
            "description": "How long the scan took, in seconds.",
            "name": "duration_seconds",
            "in": "query"
          },
          {
            "enum": [
              "full",
              " quick",
              " custom",
              " hyper",
              " threat"
            ],
            "type": "string",
            "x-go-name": "ScanType",
            "description": "The type of scan the was done (e.g.: full, quick, custom, etc.)",
            "name": "scan_type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ThreatTrace"
            },
            "x-go-name": "Traces",
            "description": "Traces found by this scan, if any.",
            "name": "traces",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Errors",
            "description": "Errors that occurred during the scan, if any.",
            "name": "errors",
            "in": "query"
          },
          {
            "type": "object",
            "x-go-name": "Metadata",
            "description": "Metadata contains additional information about the malware scan",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/{machine_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets the given machine details. Requires a user authentication token.",
        "operationId": "getMachine",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "machine",
            "schema": {
              "$ref": "#/definitions/machine"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machine/{machine_id}/remediation": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machineRemediation"
        ],
        "summary": "Gets the given machine details. Requires a user authentication token.",
        "operationId": "getMachineRemediationList",
        "responses": {
          "200": {
            "description": "machineRemediation",
            "schema": {
              "$ref": "#/definitions/machineRemediation"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Search for machines that match the criteria. Requires a user authentication token.",
        "operationId": "machineSearch",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "enum": [
              "MachineFilterTypeAll",
              " MachineFilterTypeOnline",
              " MachineFilterTypeOffline",
              " MachineFilterTypeOfflineOver7Days",
              " MachineFilterTypeOutdated"
            ],
            "type": "string",
            "format": "string",
            "x-go-name": "FilterType",
            "description": "Filter by machine status",
            "name": "filter_type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortBy",
            "description": "Field to sort by",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortASC",
            "description": "True to sort ascending",
            "name": "asc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Return machines in the given group",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "Return machines matching the given search query",
            "name": "search_string",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "StatusFilter",
            "description": "Returns machines matching the status filter",
            "name": "status_filter",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "MachineIDs",
            "description": "List of machine ids to limit the search to",
            "name": "machine_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "machineCollectionPresenter",
            "schema": {
              "$ref": "#/definitions/machineCollectionPresenter"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "handles requests to have machines uninstall the software",
        "tags": [
          "machines"
        ],
        "operationId": "removeMachine",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "enum": [
              "MachineFilterTypeAll",
              " MachineFilterTypeOnline",
              " MachineFilterTypeOffline",
              " MachineFilterTypeOfflineOver7Days",
              " MachineFilterTypeOutdated"
            ],
            "type": "string",
            "format": "string",
            "x-go-name": "FilterType",
            "description": "Filter by machine status",
            "name": "filter_type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortBy",
            "description": "Field to sort by",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortASC",
            "description": "True to sort ascending",
            "name": "asc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Return machines in the given group",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "Return machines matching the given search query",
            "name": "search_string",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "StatusFilter",
            "description": "Returns machines matching the status filter",
            "name": "status_filter",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "MachineIDs",
            "description": "Machine IDs to unregister",
            "name": "machine_ids",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "UnregisterIsolated",
            "name": "unregister_isolated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines/{machine_id}/agent_info": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets agent information for the given machine. Requires a user authentication token.",
        "operationId": "getAgentInfo",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "agentInfo",
            "schema": {
              "$ref": "#/definitions/agentInfo"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines/{machine_id}/asset_info": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets asset information for the given machine. Requires a user authentication token.",
        "operationId": "getAssetInfo",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "assetInfo",
            "schema": {
              "$ref": "#/definitions/assetInfo"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines/{machine_id}/quarantine": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets threat traces for the given machine. Requires a user authentication token.",
        "operationId": "getMachineQuarantine",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Category",
            "description": "Category is an optional parameter that is a comma separated list of category names\npossible values are: pup, pum, malware",
            "name": "category",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Type",
            "description": "Type is an optional parameter that is a comma separated list of threat type names",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name is an optional parameter of threat name to match against",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "quarantinedThreatCollectionPresenter",
            "schema": {
              "$ref": "#/definitions/quarantinedThreatCollectionPresenter"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines/{machine_id}/threat_scan_results": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets threat scan results for the given machine. Requires a user authentication token.",
        "operationId": "getThreatScanResults",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ThreatsDetected",
            "description": "Optional parameter to filter out scan results based on whether threats were found. If omited defaults to returning all.\nAllowed Values:\n\"true\"\n\"false\"",
            "name": "threats_detected",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "threatScanResult",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatScanResult"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines/{machine_id}/threat_scan_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets the summary of machine threats for the given machine. Requires a user authentication token.",
        "operationId": "getThreatScanResultSummary",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartAt",
            "description": "Time to start query",
            "name": "start_at",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ThreatsDetected",
            "description": "Optional parameter to filter out scan results based on whether threats were found. If omited defaults to returning all.\nAllowed Values:\n\"true\"\n\"false\"",
            "name": "threats_detected",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "threatScanSummary",
            "schema": {
              "$ref": "#/definitions/threatScanSummary"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines/{machine_id}/threats": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets threat traces for the given machine. Requires a user authentication token.",
        "operationId": "getThreatsForMachine",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Status",
            "description": "Status is an optional parameter that is a comma separated list of status names\npossible values are: cleaned_offline, quarantined, deleted, restored, found",
            "name": "status",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Category",
            "description": "Category is an optional parameter that is a comma separated list of category names\npossible values are: pup, pum, malware",
            "name": "category",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name is an optional parameter of threat name to match against",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Only return traces with no parents",
            "name": "ParentOnly",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only return traces that have the given id as parent_detection_id",
            "name": "ParentID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "threatCollectionPresenter",
            "schema": {
              "$ref": "#/definitions/threatCollectionPresenter"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines/{machine_id}/threats_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets threat traces for the given machine. Requires a user authentication token.",
        "operationId": "getThreatTracesForMachineByCategorySummary",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "MachineID",
            "description": "Machine ID to retrieve",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartAt",
            "description": "StartAt is the date time when the data for this view starts, it ends at the current time.",
            "name": "start_at",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Status",
            "description": "Status allows filtering by trace status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "threatTrace",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatTrace"
              }
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines_network_info": {
      "get": {
        "description": "Get paged list of machines with networking info",
        "tags": [
          "machines"
        ],
        "operationId": "getMachineNetworkInfo",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "machine",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/machine"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/machines_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets the counts of machine by state. Requires a user authentication token.",
        "operationId": "getMachineSummary",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Identifier of group to scope the counts to",
            "name": "group_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "machineSummary",
            "schema": {
              "$ref": "#/definitions/machineSummary"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/os_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets counts of machine by OS. Requires a user authentication token.",
        "operationId": "getOSSummary",
        "responses": {
          "200": {
            "description": "osSummary",
            "schema": {
              "$ref": "#/definitions/osSummary"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/policies": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Requires paging parameters.",
        "tags": [
          "policies"
        ],
        "summary": "Gets the policies for the account. Requires a user authentication token.",
        "operationId": "getAccountPolicies",
        "responses": {
          "200": {
            "description": "policy",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/policy"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Creates a new policy. Requires a user authentication token.",
        "operationId": "createPolicy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Policy name",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Contents",
            "description": "Policy contents in JSON form",
            "name": "contents",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "policy",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/policies/isolation_image": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "operationId": "uploadIsolationImage",
        "responses": {
          "200": {
            "description": "policy",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/policies/{policy_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "operationId": "getPolicy",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "Policy's ID",
            "name": "policy_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/urlPresenter"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Updates the given policy. Requires a user authentication token.",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "Policy's ID",
            "name": "policy_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Etag",
            "description": "Policy Etag",
            "name": "etag",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Policy Name",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Contents",
            "description": "Policy contents in JSON form",
            "name": "contents",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "policy",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Deletes the given policy. Requires a user authentication token.",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "Policy's ID",
            "name": "policy_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/policies/{policy_id}/assign": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Assigns the provided groups to the given policy. Requires a user authentication token.",
        "operationId": "assignPolicy",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "Policy's ID",
            "name": "policy_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "GroupIDs",
            "description": "Groups to assign to the policy",
            "name": "group_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "policy",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/policies/{policy_id}/clone": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Clones an existing policy, returning the new, cloned policy. Requires a user authentication token.",
        "operationId": "clonePolicy",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "Policy's ID",
            "name": "policy_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of cloned policy",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "IncludePolicyExclusions",
            "description": "IncludePolicyExclusions optionally include exclusions from source policy, false if omitted",
            "name": "include_policy_exclusions",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "policy",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "403": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/policies/{policy_id}/isolation_image": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "operationId": "getPolicy",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "Policy's ID",
            "name": "policy_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/urlPresenter"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Deletes the given policy. Requires a user authentication token.",
        "operationId": "deleteIsolationImage",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/policies/{policy_id}/promote": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "policies"
        ],
        "summary": "Promotes the requested policy. Requires a user authentication token.",
        "operationId": "promotePolicy",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "Policy's ID",
            "name": "policy_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/account/:account_id/cache/sync": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete sync cache for all machines belonging to the given account",
        "tags": [
          "account",
          "privateApi"
        ],
        "operationId": "bustSyncCaches",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/account/check": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "privateApi",
          "account"
        ],
        "operationId": "checkAccount",
        "parameters": [
          {
            "type": "string",
            "format": "license_key",
            "x-go-name": "LicenseKey",
            "description": "Account's License Key",
            "name": "license_key",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/account/create": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates an account with appropriate defaults. Private API token required for\nauthentication",
        "tags": [
          "account",
          "privateApi"
        ],
        "operationId": "createAccount",
        "parameters": [
          {
            "x-go-name": "DisplayName",
            "description": "Display name for account",
            "name": "name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "OwnerDisplayName",
            "description": "Owner User's display name",
            "name": "owner_user_name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "format": "email",
            "x-go-name": "OwnerEmail",
            "description": "Owner User's email address",
            "name": "owner_user_email",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "OwnerPassword",
            "description": "Owner User's password",
            "name": "owner_user_password",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "LicenseKey",
            "description": "Account's License Key",
            "name": "license_key",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "format": "uuidv4",
            "x-go-name": "ParentAccountID",
            "description": "Parent Account ID",
            "name": "parent_account_id",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "format": "uuidv4",
            "x-go-name": "DefaultPolicyID",
            "description": "Default Policy ID desired for account",
            "name": "default_policy_id",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "DisableOwnerInvite",
            "description": "Disable Owner Invite",
            "name": "disable_owner_invite",
            "in": "body",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "x-go-name": "Options",
            "description": "Account Registration Options",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AccountCreateOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/account/invite": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Request body format:\n{\n\"account_id\": \"abc12345-de67-f890-a1b2-c3d4e5f60123\",\n\"display_name\": \"User Name\",\n\"email\": \"user@example.com\",\n\"internal_user_email\": \"sovereign-user@malwarebytes.com\"\n}",
        "tags": [
          "users",
          "privateApi"
        ],
        "summary": "Invites a new user. Requires a private API authentication token.",
        "operationId": "sovereignInviteUsers",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "EmailAddresses",
            "description": "Emails of users to invite",
            "name": "emails",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "InternalUserEmail",
            "name": "internal_user_email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/account/refresh_installers": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "privateApi",
          "account",
          "installers"
        ],
        "summary": "Refreshes the installers for the account. Requires private API authentication token.",
        "operationId": "refreshInstallers",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/account/register": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "This function is used to create new accounts regularly, from external\nclients such as Sovereign. Requires a private API token for authentication",
        "tags": [
          "account",
          "privateApi"
        ],
        "operationId": "registerAccount",
        "parameters": [
          {
            "x-go-name": "DisplayName",
            "description": "Display name for account",
            "name": "name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "OwnerDisplayName",
            "description": "Owner User's display name",
            "name": "owner_user_name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "format": "email",
            "x-go-name": "OwnerEmail",
            "description": "Owner User's email address",
            "name": "owner_user_email",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "OwnerPassword",
            "description": "Owner User's password",
            "name": "owner_user_password",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "LicenseKey",
            "description": "Account's License Key",
            "name": "license_key",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "format": "uuidv4",
            "x-go-name": "ParentAccountID",
            "description": "Parent Account ID",
            "name": "parent_account_id",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "format": "uuidv4",
            "x-go-name": "DefaultPolicyID",
            "description": "Default Policy ID desired for account",
            "name": "default_policy_id",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "DisableOwnerInvite",
            "description": "Disable Owner Invite",
            "name": "disable_owner_invite",
            "in": "body",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "x-go-name": "Options",
            "description": "Account Registration Options",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AccountCreateOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "202": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/accounts": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets multiple accounts. Private API token required for authentication",
        "tags": [
          "account",
          "privateApi"
        ],
        "operationId": "getAccounts",
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/accounts/:account_id/machines": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines",
          "privateApi"
        ],
        "summary": "Search for machines that match the criteria belonging to an account. Requires a private API authentication token.",
        "operationId": "sovereignMachineSearch",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "enum": [
              "MachineFilterTypeAll",
              " MachineFilterTypeOnline",
              " MachineFilterTypeOffline",
              " MachineFilterTypeOfflineOver7Days",
              " MachineFilterTypeOutdated"
            ],
            "type": "string",
            "format": "string",
            "x-go-name": "FilterType",
            "description": "Filter by machine status",
            "name": "filter_type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortBy",
            "description": "Field to sort by",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortASC",
            "description": "True to sort ascending",
            "name": "asc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Return machines in the given group",
            "name": "group_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "Return machines matching the given search query",
            "name": "search_string",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "StatusFilter",
            "description": "Returns machines matching the status filter",
            "name": "status_filter",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "MachineIDs",
            "description": "List of machine ids to limit the search to",
            "name": "machine_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "machine",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/machine"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/accounts/{account_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets the account identified by `account_id`. Requires a private API token for\nauthentication",
        "tags": [
          "account",
          "privateApi"
        ],
        "operationId": "getAccount",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates the account identified by `account_id`. Requires a private API token for authentication",
        "tags": [
          "account",
          "privateApi"
        ],
        "operationId": "updateAccount",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "DisplayName",
            "description": "New display name for the account",
            "name": "name",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "LicenseKey",
            "description": "New license key for the account",
            "name": "license_key",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "EndpointPollingInterval",
            "description": "If not 0, this is the frequency (in seconds) this specific account is configured to tell\nits endpoints to call the machine sync API with if they're not connected to Boomerang.\nIf 0, the system default is used.",
            "name": "endpoint_polling_interval_seconds",
            "in": "body",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "type": "string",
            "x-go-name": "OwnerUserID",
            "description": "OwnerUserID should be a valid user_id from a user for the same account",
            "name": "owner_user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes the account identified by `account_id`. Requires a private API token for\nauthentication",
        "tags": [
          "account",
          "privateApi"
        ],
        "operationId": "deleteAccount",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "email",
            "x-go-name": "OwnerEmail",
            "description": "Owner User's email address",
            "name": "owner_user_email",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/accounts/{account_id}/feature_flags": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Return the enabled flags for a given account",
        "tags": [
          "featureFlags",
          "privateApi"
        ],
        "operationId": "getFeatureFlagsForAccount",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "featureFlag",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/featureFlag"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/accounts/{account_id}/groups": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups",
          "accounts",
          "privateApi"
        ],
        "summary": "Gets the groups for the given account. Requires a private api token.",
        "operationId": "getSovereignAccountGroups",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ParentID",
            "name": "parent_id",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "FilterByParentID",
            "name": "filter_by_parent_id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "group",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/group"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/accounts/{account_id}/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users",
          "privateApi"
        ],
        "summary": "Get users for the accounts. Requires a private API authentication token.",
        "operationId": "getAccountUsers",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/auth/login": {
      "post": {
        "description": "Logs the user in and returns auth and refresh tokens",
        "tags": [
          "auth"
        ],
        "operationId": "ssologin",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "x-go-name": "Email",
            "description": "Email address of user to login",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Requested account id",
            "name": "account_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "$ref": "#/definitions/login"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "412": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/boomerang/connected_machines": {
      "post": {
        "description": "The last seend at time for each of those machines is then updated to now.\nPrivate API token required for authentication.",
        "tags": [
          "boomerang",
          "privateApi"
        ],
        "summary": "Used by Boomerang to report connected machines.",
        "operationId": "connectedMachines",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/cache/sync": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete sync cache for all machines belonging to the given account",
        "tags": [
          "account"
        ],
        "operationId": "privateApi",
        "responses": {
          "204": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/feature_flags/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "featureFlags",
          "privateApi"
        ],
        "summary": "List all feature flags. Requires a private authentication token.",
        "operationId": "listFeatureFlags",
        "responses": {
          "200": {
            "description": "featureFlag",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/featureFlag"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/feature_flags/{tag}/accounts": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Return the accounts that have the given flag enabled",
        "tags": [
          "featureFlags",
          "privateApi"
        ],
        "operationId": "getAccountsForFeatureFlag",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "Tag",
            "description": "Tag to retrieve",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "account",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add the given account to the given feature flag. Requires a private authentication token",
        "tags": [
          "featureFlags",
          "privateApi"
        ],
        "operationId": "addAccountToFeatureFlag",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "Tag",
            "description": "Tag to retrieve",
            "name": "tag",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to assign",
            "name": "account_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove the given account from the given feature flag. Requires a private authentication token",
        "tags": [
          "featureFlags",
          "privateApi"
        ],
        "operationId": "removeAccountFromFeatureFlag",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "Tag",
            "description": "Tag to retrieve",
            "name": "tag",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to remove",
            "name": "account_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/feature_flags/{tag}/set": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "featureFlags",
          "privateApi"
        ],
        "summary": "Sets the given feature flag. Requires a private authentication token.",
        "operationId": "setFeatureFlag",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "Tag",
            "description": "Tag to retrieve",
            "name": "tag",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "FeatureFlagStateOff",
              " FeatureFlagStatePerAccount",
              " FeatureFlagStateOn"
            ],
            "type": "string",
            "format": "string",
            "x-go-name": "State",
            "description": "State to change flag to\nOne of: \"FeatureFlagStateOff\" - disable flag\n\"FeatureFlagStatePerAccount\" - enable flag per account\n\"FeatureFlagStateOn\" - globally enable flag",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/global_exclusions/{name}": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "exclusions",
          "privateApi"
        ],
        "summary": "Creates new global exclusions for the exclusions tracked by `name`. Requires a private API token.",
        "operationId": "createGlobalExclusions",
        "parameters": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExclusionTypeAndValue"
            },
            "x-go-name": "Exclusions",
            "name": "exclusions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/groups/{group_id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "groups",
          "privateApi"
        ],
        "summary": "Updates the given group. Requires a private api authentication token.",
        "operationId": "updateSovereignGroup",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "GroupID",
            "description": "Group ID to retrieves",
            "name": "group_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name of group",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PolicyID",
            "description": "ID of the policy for this group",
            "name": "policy_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ParentID",
            "description": "ID of the group's parent group",
            "name": "parent_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OUObjectID",
            "description": "ActiveDirectory Object ID: must be DND or admin",
            "name": "ou_object_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "group",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/search_users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "privateApi"
        ],
        "summary": "Search users on email, or display name. Requires a private API authentication token.",
        "operationId": "searchUsers",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "String",
            "description": "String string",
            "name": "search_string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/sso/users": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Request body format:\n{\n\"account_id\": \"abc12345-de67-f890-a1b2-c3d4e5f60123\",\n\"display_name\": \"User Name\",\n\"email\": \"user@example.com\",\n\"internal_user_email\": \"sovereign-user@malwarebytes.com\"\n}",
        "summary": "Finds user for SSO login. Requires a private API authentication token.",
        "operationId": "users",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/support": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates a support token for the given user and returns it as part of a URL. Requires a private API authentication token",
        "tags": [
          "accounts",
          "privateApi"
        ],
        "operationId": "createSupportToken",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID to retrieves",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "InternalUserEmail",
            "name": "internal_user_email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/supportUrl"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/users/{user_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users",
          "privateApi"
        ],
        "summary": "Gets the info for the user identified by `user_id`. Requires a user private API token.",
        "operationId": "getUserById",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "UserID",
            "description": "User's ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users",
          "privateApi"
        ],
        "summary": "Updates an existing private user. Requires a private api authentication token.",
        "operationId": "updateUser",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "UserID",
            "description": "User's ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DisplayName",
            "description": "User's display name",
            "name": "display_name",
            "in": "query"
          },
          {
            "type": "string",
            "format": "email",
            "x-go-name": "EmailAddress",
            "description": "User's email",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Role",
            "description": "User's role",
            "name": "role",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "AllGroupsAccess",
            "description": "Does this user have access to all the groups",
            "name": "all_groups_access",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "GroupIDs",
            "description": "Group IDs this user has access to",
            "name": "group_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/users/{user_id}/impersonation": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates an impersonation token for the given user and returns it as part of a URL. Requires a private API authentication token",
        "tags": [
          "users",
          "privateApi"
        ],
        "operationId": "createImpersonationToken",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "UserID",
            "description": "User's ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "impersonationUrl",
            "schema": {
              "$ref": "#/definitions/impersonationUrl"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/private/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "Gets the requested Identity Provider by slug.",
        "operationId": "hasIDPSlug",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Slug",
            "name": "slug",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/identityProvider"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/quarantine": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Get threat traces for the given account. Requires a user authentication token.",
        "operationId": "getQuarantineForAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Category",
            "description": "Category is an optional parameter that is a comma separated list of category names\npossible values are: pup, pum, malware",
            "name": "category",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Type",
            "description": "Type is an optional parameter that is a comma separated list of threat type names",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name is an optional parameter of threat name to match against",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "quarantinedThreatCollectionPresenter",
            "schema": {
              "$ref": "#/definitions/quarantinedThreatCollectionPresenter"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/quarantine/{quarantine_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Get the given quarantine items for the given account. Requires a user authentication token.",
        "operationId": "getQuarantineItem",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "QuarantineID",
            "description": "Quarantine ID to retrieve",
            "name": "quarantine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "threatTrace",
            "schema": {
              "$ref": "#/definitions/threatTrace"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Gets a report. Requires a user authentication token.",
        "operationId": "getReports",
        "responses": {
          "200": {
            "$ref": "#/responses/reports"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Creates a report. Requires a user authentication token.",
        "operationId": "reportDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "format": "string",
            "x-go-name": "ReportType",
            "name": "type",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Period",
            "name": "period",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Units",
            "name": "units",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "TimeZone",
            "name": "time_zone",
            "in": "query"
          },
          {
            "$ref": "#/definitions/ReportRecurrenceRaw",
            "x-go-name": "Recurrence",
            "name": "recurrence",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/report"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Deletes a report. Requires a user authentication token.",
        "operationId": "deleteReports",
        "responses": {
          "200": {
            "$ref": "#/responses/reports"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/reports/:report_id": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Gets a report. Requires a user authentication token.",
        "operationId": "getReport",
        "responses": {
          "200": {
            "$ref": "#/responses/report"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Updates a report. Requires a user authentication token.",
        "operationId": "updateReport",
        "responses": {
          "200": {
            "$ref": "#/responses/report"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "report",
          "user"
        ],
        "summary": "Deletes a report. Requires a user authentication token.",
        "operationId": "deleteReport",
        "responses": {
          "200": {
            "$ref": "#/responses/report"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "schedules"
        ],
        "summary": "Gets schedules for the current account. Requires a user authentication token.",
        "operationId": "getSchedules",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "schedule",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schedule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "schedules"
        ],
        "summary": "Creates a schedule with the given values. Requires a user authentication token.",
        "operationId": "createSchedule",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "Schedule ID to retrieves",
            "name": "schedule_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Schedule name",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Command",
            "description": "Command to run",
            "name": "command",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "json",
            "x-go-name": "CommandData",
            "description": "Data for the command in JSON format",
            "name": "command_data",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "RRule",
            "description": "Recurrance rule for the schedule",
            "name": "rrule",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Enabled",
            "description": "True if enabled",
            "name": "enabled",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Recover",
            "description": "Recover from missed scheduled items, default false",
            "name": "recover",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Etag",
            "description": "Schedule Etag",
            "name": "etag",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "schedule",
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/schedules/{schedule_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "schedules"
        ],
        "summary": "Gets the given schedule. Requires a user authentication token.",
        "operationId": "getSchedule",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "Schedule ID to retrieves",
            "name": "schedule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "schedule",
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "schedules"
        ],
        "summary": "Updates the given schedule. Requires a user authentication token.",
        "operationId": "updateSchedule",
        "responses": {
          "200": {
            "description": "schedule",
            "schema": {
              "$ref": "#/definitions/schedule"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "schedules"
        ],
        "summary": "Deletes the given schedule. Requires a user authentication token.",
        "operationId": "deleteSchedule",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "Schedule ID to retrieves",
            "name": "schedule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/schedules/{schedule_id}/groups": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "schedules"
        ],
        "summary": "Updates the groups for the given schedule. Requires a user authentication token.",
        "operationId": "updateScheduleGroups",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "Schedule ID to retrieves",
            "name": "schedule_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "GroupIDs",
            "name": "group_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threat/{threat_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Get the given threat trace for the given account. Requires a user authentication token.",
        "operationId": "getThreat",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ThreatTraceID",
            "description": "Threat Trace ID to retrieve",
            "name": "threat_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "threatTrace",
            "schema": {
              "$ref": "#/definitions/threatTrace"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threat_machine_counts": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Provides threat counts grouped by machine. Requires a user authentication token.",
        "operationId": "getThreatMachineCounts",
        "responses": {
          "200": {
            "description": "threatMachineCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatMachineCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threat_scan_results/{scan_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets results for a given scan. Requires a user authentication token.",
        "operationId": "getThreatScanResultByID",
        "responses": {
          "200": {
            "description": "threatScanResult",
            "schema": {
              "$ref": "#/definitions/threatScanResult"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threat_scan_results/{scan_id}/threats": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Gets threat traces for a given scan. Requires a user authentication token.",
        "operationId": "getThreatTracesForScan",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "ScanID",
            "description": "Scan ID to retrieves",
            "name": "scan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Only return traces with no parents",
            "name": "ParentOnly",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only return traces that have the given id as parent_detection_id",
            "name": "ParentID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "threatTrace",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatTrace"
              }
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threats": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "machines"
        ],
        "summary": "Get threat traces for the given account. Requires a user authentication token.",
        "operationId": "getThreatsForAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Status",
            "description": "Status is an optional parameter that is a comma separated list of status names\npossible values are: cleaned_offline, quarantined, deleted, restored, found",
            "name": "status",
            "in": "query"
          },
          {
            "$ref": "#/definitions/CommaSeparatedString",
            "x-go-name": "Category",
            "description": "Category is an optional parameter that is a comma separated list of category names\npossible values are: pup, pum, malware",
            "name": "category",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Name is an optional parameter of threat name to match against",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Only return traces with no parents",
            "name": "ParentOnly",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only return traces that have the given id as parent_detection_id",
            "name": "ParentID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "threatCollectionPresenter",
            "schema": {
              "$ref": "#/definitions/threatCollectionPresenter"
            }
          },
          "400": {
            "$ref": "#/responses/httpError"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threats_cat_history": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Provides threat counts, grouped by category, for all time. Requires a user authentication token.",
        "operationId": "getDashboardThreatsHistory",
        "responses": {
          "200": {
            "description": "threatCategoryCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCategoryCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threats_cat_recent": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Provides threat counts, grouped by category, for the past 72 hours. Requires a user authentication token.",
        "operationId": "getDashboardThreatsRecent",
        "responses": {
          "200": {
            "description": "threatCategoryCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCategoryCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threats_category_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "summary"
        ],
        "summary": "Returns the threat category summary. Requires a user authentication token.",
        "operationId": "getThreatCategorySummary",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Start",
            "description": "Time to start query",
            "name": "start",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "End",
            "description": "Time to stop query",
            "name": "end",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "threatCategoryCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCategoryCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threats_machines_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "Provides time series data for threat categories for the specified range. Requires a user authentication token.",
        "operationId": "getCategoryThreatTimeSeries",
        "responses": {
          "200": {
            "description": "threatCategoryTimeSeries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCategoryTimeSeries"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threats_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "summary"
        ],
        "summary": "Returns the threat summary time series. Requires a user authentication token.",
        "operationId": "getThreatSummary",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Start",
            "description": "Time to start query",
            "name": "start",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "End",
            "description": "Time to stop query",
            "name": "end",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Interval",
            "description": "Time interval",
            "name": "interval",
            "in": "query",
            "required": true
          },
          {
            "pattern": "(day|hour)",
            "type": "string",
            "x-go-name": "Precision",
            "description": "Precision",
            "name": "precision",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "threatCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/threats_top_summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "account",
          "summary"
        ],
        "summary": "Returns the top threats summarized. Requires a user authentication token.",
        "operationId": "getTopThreatSummary",
        "responses": {
          "200": {
            "description": "threatCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/top_blocked_websites": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Returns the names of the top 10 blocked websites for the account. Requires a user authentication token.",
        "operationId": "topBlockedWebsites",
        "responses": {
          "200": {
            "description": "websiteCountWithTotal",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/websiteCountWithTotal"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/top_threats_malware": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Returns the names of the top 10 Malware for the account. Requires a user authentication token.",
        "operationId": "topThreatsMalware",
        "responses": {
          "200": {
            "description": "threatCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/top_threats_pum": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Returns the names of the top 10 PUMs for account. Requires a user authentication token.",
        "operationId": "topThreatsPum",
        "responses": {
          "200": {
            "description": "threatCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/top_threats_pup": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "accounts",
          "dashboard"
        ],
        "summary": "Returns the names of the top 10 PUPs for account. Requires a user authentication token.",
        "operationId": "topThreatsPup",
        "responses": {
          "200": {
            "description": "threatCount",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/threatCount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/user": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Gets the info for the logged in user. Requires a user authentication token.",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "me",
            "schema": {
              "$ref": "#/definitions/me"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/user/accept_invite": {
      "post": {
        "description": "Accepts the user's invite",
        "tags": [
          "users"
        ],
        "operationId": "acceptInvite",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Token",
            "description": "Token for accepting the invite",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DisplayName",
            "description": "User's display name",
            "name": "display_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "password",
            "x-go-name": "Password",
            "description": "User's password",
            "name": "password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/user/impersonation": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Authorizes or deauthorizes impersonation requests for a user. Requires a user\nauthentication token",
        "tags": [
          "users"
        ],
        "operationId": "userImpersonation",
        "parameters": [
          {
            "x-go-name": "Authorize",
            "description": "Authorize should be true if this is requesting authorization, false if this\nis a deauthorization request",
            "name": "authorize",
            "in": "body",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/user/otp": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "auth",
          "verifyOtp",
          "otp"
        ],
        "summary": "Requires a user authentication token.",
        "operationId": "userVerifyOTP",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "auth",
          "otp"
        ],
        "summary": "Returns the OTP setup URL for the current user. Requires a user authentication token.",
        "operationId": "userGetOTPSecret",
        "responses": {
          "200": {
            "description": "otpSecret",
            "schema": {
              "$ref": "#/definitions/otpSecret"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "auth",
          "otp"
        ],
        "summary": "Requires a user authentication token.",
        "operationId": "userDisableOTP",
        "responses": {
          "200": {
            "description": "otpSecret",
            "schema": {
              "$ref": "#/definitions/otpSecret"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/user/preferences": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "preferences"
        ],
        "summary": "Gets preferences for the logged in user. Requires a user authentication token.",
        "operationId": "getPreferences",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "preference",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/preference"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "preferences"
        ],
        "summary": "Updates the given preferenece for the current user. Requires a user authentication token.",
        "operationId": "updatePreferences",
        "parameters": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Preference"
            },
            "x-go-name": "Preferences",
            "name": "preferences",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/user/preferences/{category}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "preferences"
        ],
        "summary": "Gets preferences for the logged in user from the given category. Requires a user authentication token.",
        "operationId": "getCategoryPreferences",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "StartIndex",
            "description": "Index to start paging from",
            "name": "start_index",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PageSize",
            "description": "Number of results to return",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Since",
            "description": "Time to start query",
            "name": "since",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Until",
            "description": "Time to stop query",
            "name": "until",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Category",
            "description": "The category to lookup",
            "name": "category",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "preference",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/preference"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Gets the users for the current account. Requires a user authentication token.",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Creates a new user. Requires a user authentication token.",
        "operationId": "createUser",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DisplayName",
            "description": "User's display name",
            "name": "display_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "email",
            "x-go-name": "EmailAddress",
            "description": "User's email",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "password",
            "x-go-name": "Password",
            "description": "User's password",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "role",
            "x-go-name": "Role",
            "description": "User's role",
            "name": "role",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "AllGroupsAccess",
            "description": "Does this user have access to all the groups",
            "name": "all_groups_access",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "GroupIDs",
            "description": "Group IDs this user has access to",
            "name": "group_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/users/:user_id/resend_invite": {
      "post": {
        "description": "Accepts the user's invite\nalso available as /private/users/:user_id/resend_invite using a private api token",
        "tags": [
          "users"
        ],
        "operationId": "resendInvite",
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users",
          "privateApi"
        ],
        "summary": "Gets the info for the user identified by `user_id`. Requires a user private API token.",
        "operationId": "getUserById",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "UserID",
            "description": "User's ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users",
          "privateApi"
        ],
        "summary": "Updates an existing private user. Requires a private api authentication token.",
        "operationId": "updateUser",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "UserID",
            "description": "User's ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DisplayName",
            "description": "User's display name",
            "name": "display_name",
            "in": "query"
          },
          {
            "type": "string",
            "format": "email",
            "x-go-name": "EmailAddress",
            "description": "User's email",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Role",
            "description": "User's role",
            "name": "role",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "AllGroupsAccess",
            "description": "Does this user have access to all the groups",
            "name": "all_groups_access",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "GroupIDs",
            "description": "Group IDs this user has access to",
            "name": "group_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Delete the given user. Requires a user authentication token.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "UserID",
            "description": "User's ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 64,
            "type": "string",
            "x-go-name": "AccountID",
            "description": "Account ID",
            "name": "account_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/nil"
          },
          "401": {
            "$ref": "#/responses/httpError"
          },
          "404": {
            "$ref": "#/responses/httpError"
          },
          "500": {
            "$ref": "#/responses/httpError"
          }
        }
      }
    }
  },
  "definitions": {
    "AccountCreateOptions": {
      "description": "{\n...\n\"options\": {\n\"type\": \"OneView\"\n}\n}",
      "type": "object",
      "title": "Create Account Options, this is a map of options to create the account with.",
      "properties": {
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/model"
    },
    "AccountOptions": {
      "type": "object",
      "properties": {
        "msp": {
          "$ref": "#/definitions/MSP"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/model"
    },
    "CommaSeparatedString": {
      "description": "CommaSeparatedString represents a string parameter that should be parsed as a slice of strings",
      "type": "object",
      "properties": {
        "Strings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/bindings"
    },
    "DeprecatedInstaller": {
      "type": "object",
      "properties": {
        "error_msg": {
          "description": "Error assosiated with the installer generation. Only populated if Status == 3 (Error)",
          "type": "string",
          "x-go-name": "ErrorMsg"
        },
        "id": {
          "description": "Identifier for installer",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "status": {
          "description": "Status of installer\n\nA value of:\n1: Pending\n2: Success\n3: Error",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        },
        "type": {
          "description": "Type of installer",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        },
        "updated_at": {
          "description": "When installer was updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "version": {
          "description": "Version of installer",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ExcludeFrom": {
      "description": "ExcludeFrom describes which technologies the exclusion applies to",
      "type": "object",
      "properties": {
        "exploit_protection": {
          "type": "boolean",
          "x-go-name": "Exploit"
        },
        "malware_protection": {
          "type": "boolean",
          "x-go-name": "Malware"
        },
        "ransomware_protection": {
          "type": "boolean",
          "x-go-name": "Ransomware"
        },
        "suspicious_activity": {
          "type": "boolean",
          "x-go-name": "SuspiciousActivity"
        },
        "website_protection": {
          "type": "boolean",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ExclusionMachineView": {
      "description": "ExclusionMachineView represents an API exclusion presented to the endpoint",
      "type": "object",
      "properties": {
        "created_at": {
          "description": "When exclusion was created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "enabled": {
          "description": "True if exclusion is enabled",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "etag": {
          "description": "ETag for exclusion",
          "type": "string",
          "x-go-name": "ETag"
        },
        "exploit_protection": {
          "type": "boolean",
          "x-go-name": "Exploit"
        },
        "id": {
          "description": "Identifier for exclusion",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "malware_protection": {
          "type": "boolean",
          "x-go-name": "Malware"
        },
        "ransomware_protection": {
          "type": "boolean",
          "x-go-name": "Ransomware"
        },
        "suspicious_activity": {
          "type": "boolean",
          "x-go-name": "SuspiciousActivity"
        },
        "type": {
          "description": "Type of exclusion\n\nA value of:\n1: Exclusion for file path\n2: Exclusion for folder path\n3: Exclusion for wildcard path\n4: Exclusion for registry\n5: Exclusion for file extensions",
          "type": "integer",
          "format": "int64",
          "enum": [
            1,
            2,
            3,
            4,
            5
          ],
          "x-go-name": "Type"
        },
        "updated_at": {
          "description": "When exclusion was updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "value": {
          "description": "Value of exclusion",
          "type": "string",
          "x-go-name": "Value"
        },
        "website_protection": {
          "type": "boolean",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ExclusionPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "PolicyID"
        },
        "name": {
          "type": "string",
          "x-go-name": "PolicyName"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ExclusionTypeAndValue": {
      "description": "ExclusionTypeAndValue contains the exclusion type and value",
      "type": "object",
      "required": [
        "value",
        "type"
      ],
      "properties": {
        "type": {
          "description": "Type of exclusion\n\nA value of:\n1: Exclusion for file path\n2: Exclusion for folder path\n3: Exclusion for wildcard path\n4: Exclusion for registry\n5: Exclusion for file extensions\n6: Exclusion for web domain\n7: Exclusion for web IP\n13: Exclusion for hash\n14: Exclusion for web monitoring",
          "type": "integer",
          "format": "int64",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            13,
            14
          ],
          "x-go-name": "Type"
        },
        "value": {
          "description": "Value of exclusion",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/bindings"
    },
    "ID": {
      "description": "ID is a wrapper for nebula's primary key type",
      "type": "object",
      "properties": {
        "UUID": {
          "$ref": "#/definitions/UUID"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/model"
    },
    "Isolation": {
      "type": "object",
      "properties": {
        "desktop": {
          "type": "boolean",
          "x-go-name": "Desktop"
        },
        "network": {
          "type": "boolean",
          "x-go-name": "Network"
        },
        "process": {
          "type": "boolean",
          "x-go-name": "Process"
        },
        "status": {
          "type": "boolean",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "JobMachineMapping": {
      "type": "object",
      "properties": {
        "job_id": {
          "$ref": "#/definitions/ID"
        },
        "machine_id": {
          "$ref": "#/definitions/ID"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/model"
    },
    "LicenseMachineCount": {
      "description": "LicenseMachineCount represents the count of machines using a product on a license",
      "type": "object",
      "properties": {
        "machine_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MachineCount"
        },
        "os_platform": {
          "type": "string",
          "x-go-name": "OSPlatform"
        },
        "os_type": {
          "type": "string",
          "x-go-name": "OSType"
        },
        "product_type": {
          "type": "string",
          "x-go-name": "ProductType"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "LocalizableTime": {
      "description": "LocalizableTime returns a time that can be set to a specific location",
      "type": "object",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "MSP": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "redirect_url": {
          "type": "string",
          "x-go-name": "RedirectURL"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/model"
    },
    "MachineStatus": {
      "type": "object",
      "properties": {
        "isolation": {
          "$ref": "#/definitions/Isolation"
        },
        "reboot_required": {
          "$ref": "#/definitions/RebootRequired"
        },
        "remediation_required": {
          "$ref": "#/definitions/RemediationRequired"
        },
        "scan_needed": {
          "$ref": "#/definitions/ScanNeeded"
        },
        "suspicious_activity": {
          "$ref": "#/definitions/SuspiciousActivity"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "NIC": {
      "description": "NIC is used to return network adapted information for endpoints, it is set in agent information",
      "type": "object",
      "properties": {
        "description": {
          "description": "NIC Description",
          "type": "string",
          "x-go-name": "Description"
        },
        "ips": {
          "description": "Collection of IP Addresses for NIC",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IPs"
        },
        "mac_address": {
          "description": "NIC MAC address",
          "type": "string",
          "x-go-name": "MACAddress"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "NullUUID": {
      "description": "NullUUID can be used with the standard sql package to represent a\nUUID value that can be NULL in the database.",
      "type": "object",
      "properties": {
        "UUID": {
          "$ref": "#/definitions/UUID"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/gofrs/uuid"
    },
    "Preference": {
      "description": "Preference represents a user preference",
      "type": "object",
      "properties": {
        "category": {
          "description": "The preference's updated category",
          "type": "string",
          "x-go-name": "Category"
        },
        "name": {
          "description": "The name of the preference",
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "description": "The preference's new value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/bindings"
    },
    "ProductLicenseInfo": {
      "description": "ProductLicenseInfo provides basic information about the licensing state to the API client for a given product",
      "type": "object",
      "properties": {
        "auto_renew": {
          "description": "AutoRenew",
          "type": "string",
          "x-go-name": "AutoRenew"
        },
        "catalog_code": {
          "description": "Product Catalog Code",
          "type": "string",
          "x-go-name": "LicensedProductCatalogCode"
        },
        "combo_code": {
          "description": "Product Combo Code",
          "type": "string",
          "x-go-name": "LicensedProductComboCode"
        },
        "ir_remediations_count": {
          "description": "IRRemediationsCount is the number of remediations this account has performed",
          "type": "integer",
          "format": "int32",
          "x-go-name": "RemediationsCount"
        },
        "license_expires_at": {
          "description": "Expiration date time of this product's License",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LicenseExpiresAt"
        },
        "license_status": {
          "description": "LicenseStatus is the current license status for this account; comes from Keystone",
          "type": "string",
          "x-go-name": "LicenseStatus"
        },
        "license_term_type": {
          "description": "LicenseTermType is the term type from the keystone entitlement",
          "type": "string",
          "x-go-name": "LicenseTermType"
        },
        "licensed_ir_remediations": {
          "description": "LicensedRemediations is the number of remediations that the account is allowed to have per\nentitlement features",
          "type": "integer",
          "format": "int32",
          "x-go-name": "LicensedRemediations"
        },
        "licensed_product": {
          "description": "Product code user's account is licensed for",
          "type": "string",
          "x-go-name": "LicensedProducts"
        },
        "licensed_seats": {
          "description": "Number of seats that this product is licensed for",
          "type": "integer",
          "format": "int32",
          "x-go-name": "LicensedSeats"
        },
        "machine_counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseMachineCount"
          },
          "x-go-name": "LicenseMachineCounts"
        },
        "renewed_on": {
          "description": "RenewedOn",
          "type": "string",
          "format": "date-time",
          "x-go-name": "RenewedOn"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "RebootRequired": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string",
          "x-go-name": "JobID"
        },
        "job_state": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "JobStatus"
        },
        "reasons": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Reasons"
        },
        "status": {
          "type": "boolean",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "RemediationItem": {
      "type": "object",
      "properties": {
        "at": {
          "type": "string",
          "x-go-name": "At"
        },
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "threat_name": {
          "type": "string",
          "x-go-name": "ThreatName"
        },
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "RemediationRequired": {
      "type": "object",
      "properties": {
        "infection_count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "InfectionCount"
        },
        "job_state": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "JobStatus"
        },
        "status": {
          "type": "boolean",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "Report": {
      "description": "Report represents a Report",
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_by_user": {
          "type": "string",
          "x-go-name": "CreatedByUser"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "last_generation_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastGeneratedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "next_generation_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "NextGenerationAt"
        },
        "period": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Period"
        },
        "recurrence": {
          "$ref": "#/definitions/ReportRecurrence"
        },
        "time_zone": {
          "type": "string",
          "x-go-name": "TimeZone"
        },
        "type": {
          "type": "string",
          "x-go-name": "ReportType"
        },
        "units": {
          "type": "string",
          "x-go-name": "Units"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ReportRecurrence": {
      "description": "ReportRecurrence represents the Recurrence data for a report",
      "type": "object",
      "properties": {
        "days_of_month": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "DaysOfMonth"
        },
        "days_of_week": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DaysOfWeek"
        },
        "recur": {
          "type": "string",
          "x-go-name": "Recur"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ReportRecurrenceRaw": {
      "description": "ReportRecurrence defines the recurrence schedule of a report using only primitive objects",
      "type": "object",
      "properties": {
        "days_of_month": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "DaysOfMonth"
        },
        "days_of_week": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DaysOfWeek"
        },
        "recur": {
          "type": "string",
          "x-go-name": "Recur"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/model"
    },
    "ReportSubscription": {
      "description": "ReportSubscription contains the subscription information for a scheduled report",
      "type": "object",
      "properties": {
        "subscribed": {
          "description": "true/false: is user subscribed to this report?",
          "type": "string",
          "x-go-name": "Subscribed"
        },
        "timespan": {
          "$ref": "#/definitions/ReportTimespan"
        },
        "type": {
          "type": "string",
          "format": "string",
          "x-go-name": "ReportType"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/bindings"
    },
    "ReportTimespan": {
      "description": "ReportTimespan defines the period covered by the report",
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.mb-internal.com/nebula/retina/enum"
    },
    "ScanNeeded": {
      "type": "object",
      "properties": {
        "job_state": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "ScanStatus"
        },
        "last_scanned_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastScannedAt"
        },
        "status": {
          "type": "boolean",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "SuspiciousActivity": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "status": {
          "type": "boolean",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ThreatTrace": {
      "description": "ThreatTrace represents a trace of a threat found on an endpoint",
      "type": "object",
      "properties": {
        "clean_time": {
          "description": "The actual time that the threat was quarantined, if applicable",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CleanedAt"
        },
        "correlation_hash": {
          "description": "A hash to allow correlation of the same trace being deteced with the same threat across multiple malwares scans.\nThis is a hash of a combination of:\nThe threat name\nThe threat path (whatever data is available for that based on the threat type)\nThe hash of the content of the infected item",
          "type": "string",
          "x-go-name": "CorrelationHash"
        },
        "detection_id": {
          "description": "The ID of this detected trace.",
          "type": "string",
          "x-go-name": "DetectionID"
        },
        "parent_detection_id": {
          "description": "The parent detection ID of this trace, if exists",
          "type": "string",
          "x-go-name": "ParentDetectionID"
        },
        "path": {
          "description": "The path to the detected item",
          "type": "string",
          "x-go-name": "Path"
        },
        "status": {
          "description": "The status of the trace",
          "type": "string",
          "enum": [
            "\tfound",
            " quarantined",
            " deleted",
            " restored"
          ],
          "x-go-name": "Status"
        },
        "threat_name": {
          "description": "Name of the threat this trace is infected with",
          "type": "string",
          "x-go-name": "ThreatName"
        },
        "type": {
          "description": "The item type(s)",
          "type": "array",
          "enum": [
            "file",
            " folder",
            " registry key",
            " registry value",
            " process",
            " module"
          ],
          "items": {
            "type": "string"
          },
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/bindings"
    },
    "UUID": {
      "type": "array",
      "title": "UUID is an array type to represent the value of a UUID, as defined in RFC-4122.",
      "items": {
        "type": "integer",
        "format": "uint8"
      },
      "x-go-package": "github.com/gofrs/uuid"
    },
    "UnlicensedInfo": {
      "description": "UnlicensedInfo provides counts of machines using unlicensed products",
      "type": "object",
      "properties": {
        "machine_counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseMachineCount"
          },
          "x-go-name": "LicenseMachineCounts"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "WebsiteCount": {
      "description": "WebsiteCount represents a count of threats grouped by name",
      "type": "object",
      "properties": {
        "count": {
          "description": "Number of threats with name",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "url": {
          "description": "Website URL",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "account": {
      "type": "object",
      "title": "Account represents a API account.",
      "properties": {
        "account_token": {
          "description": "Token for registering new machines",
          "type": "string",
          "x-go-name": "AccountToken"
        },
        "created_at": {
          "description": "When the account was created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "default_group_id": {
          "description": "Default group id",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "DefaultGroupID"
        },
        "default_policy_id": {
          "description": "Default policy id",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "DefaultPolicyID"
        },
        "edr_was_enabled": {
          "description": "EDRWasEnabled is true if EDR was enabled at some point for this account",
          "type": "boolean",
          "x-go-name": "EDRWasEnabled"
        },
        "id": {
          "description": "Identifier for account",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "license_key": {
          "description": "License key",
          "type": "string",
          "x-go-name": "LicenseKey"
        },
        "machines_count": {
          "description": "Cache counter for machines",
          "type": "integer",
          "format": "int32",
          "x-go-name": "MachinesCount"
        },
        "name": {
          "description": "Account display name",
          "type": "string",
          "x-go-name": "Name"
        },
        "options": {
          "$ref": "#/definitions/AccountOptions"
        },
        "owner_id": {
          "description": "ID of owner user",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "OwnerUserID"
        },
        "product_license_info": {
          "description": "User account's license information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductLicenseInfo"
          },
          "x-go-name": "ProductLicenseInfos"
        },
        "unlicensed_info": {
          "$ref": "#/definitions/UnlicensedInfo"
        },
        "updated_at": {
          "description": "When the account was updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "users_count": {
          "description": "Cache counter for users",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UsersCount"
        }
      },
      "x-go-name": "Account",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "accountSamlDetails": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "idp_details": {
          "$ref": "#/definitions/idpDetails"
        },
        "jit_provisioning": {
          "type": "boolean",
          "x-go-name": "JITProvisioning"
        },
        "service_provider_initiated": {
          "type": "boolean",
          "x-go-name": "ServiceProviderInitiated"
        },
        "sp_details": {
          "$ref": "#/definitions/serviceProviderDetails"
        },
        "strict_mode": {
          "type": "boolean",
          "x-go-name": "StrictMode"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "AccountSamlDetails",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "agentInfo": {
      "description": "MachineAgentInfo represents information received from the endpoint that describes itself",
      "type": "object",
      "properties": {
        "agent_info": {
          "type": "string",
          "x-go-name": "Data"
        },
        "agent_info_last_updated_at": {
          "description": "When the agent info was last updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "AgentInfoLastUpdatedAt"
        },
        "last_seen_at": {
          "description": "When the machine last checked in",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastSeenAt"
        }
      },
      "x-go-name": "MachineAgentInfo",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "apiError": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/innerError"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/utils/httputil"
    },
    "apiErrors": {
      "description": "Errors",
      "type": "array",
      "items": {
        "$ref": "#/definitions/apiError"
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/utils/httputil"
    },
    "apiToken": {
      "description": "APIToken contains a JWT token and it's expiration",
      "type": "object",
      "properties": {
        "expiration": {
          "description": "Expiration for the token",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "token": {
          "description": "The token value",
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-name": "APIToken",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "apiTokens": {
      "description": "APITokens is a pair of tokens for accessign the API",
      "type": "object",
      "properties": {
        "auth_token": {
          "$ref": "#/definitions/apiToken"
        },
        "refresh_token": {
          "$ref": "#/definitions/apiToken"
        }
      },
      "x-go-name": "APITokens",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "assetInfo": {
      "type": "object",
      "title": "MachineAssetInfo represents a API machine asset information.",
      "properties": {
        "asset_info": {
          "description": "JSON data from the agent",
          "type": "string",
          "x-go-name": "Data"
        }
      },
      "x-go-name": "MachineAssetInfo",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "dashboardCounts": {
      "description": "DashboardEndpointCounts is used to return endpoin counts for the dashboard",
      "type": "object",
      "properties": {
        "infected": {
          "description": "Count of infected endpoints",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Infected"
        },
        "offline": {
          "description": "Count of offline endpoints",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offline"
        },
        "online": {
          "description": "Count of online endpoints",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Online"
        }
      },
      "x-go-name": "DashboardEndpointCounts",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "event": {
      "type": "object",
      "title": "RTPStreamEvent represents a API event.",
      "properties": {
        "category": {
          "description": "event category -- malwarey, pup, pum, ransomware, expoit",
          "type": "string",
          "x-go-name": "Category"
        },
        "detected_at": {
          "description": "when the rtp stream event was detected",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DetectedAt"
        },
        "id": {
          "description": "Event identifier",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "location": {
          "description": "location -- filepath, registry key, website",
          "type": "string",
          "x-go-name": "Location"
        },
        "machine_id": {
          "description": "Identifier of the event's machine",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "MachineID"
        },
        "machine_name": {
          "description": "Name of the event's machine",
          "type": "string",
          "x-go-name": "MachineName"
        },
        "reported_at": {
          "description": "when the rtp stream event was reported to the nebula cloud",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ReportedAt"
        },
        "source": {
          "description": "event source -- which controller raised the event",
          "type": "string",
          "x-go-name": "Source"
        },
        "status": {
          "description": "event status -- blocked, found, quarantined, deleted, cleaned offline",
          "type": "string",
          "x-go-name": "Status"
        },
        "threat_name": {
          "description": "name of the event's threat",
          "type": "string",
          "x-go-name": "ThreatName"
        },
        "type": {
          "description": "The item type(s)\n(e.g.: file, folder, registry key, registry value, process, module etc.)",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-name": "RTPStreamEvent",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "eventCollectionPresenter": {
      "description": "EventCollectionPresenter represents a collection of Events and total count of Events",
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/event"
          },
          "x-go-name": "Events"
        },
        "total_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "EventCollectionPresenter",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "eventTimeSeries": {
      "description": "EventTimeSeries is a row (point) in a time series query",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        }
      },
      "x-go-name": "EventTimeSeries",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "exclusion": {
      "type": "object",
      "title": "Exclusion represents a API exclusion.",
      "properties": {
        "account_id": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "account_level": {
          "description": "AccountLevel indicates whether the exclusion applies to all policies",
          "type": "boolean",
          "x-go-name": "AccountLevel"
        },
        "comment": {
          "description": "Comment left by user who created/updated the exclusion",
          "type": "string",
          "x-go-name": "Comment"
        },
        "created_at": {
          "description": "When the exclusion was created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "created_by": {
          "description": "Email of the user who created the exclusion",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "enabled": {
          "description": "True if exclusion is enabled",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "etag": {
          "description": "ETag for exclusion",
          "type": "string",
          "x-go-name": "ETag"
        },
        "exploit_protection": {
          "type": "boolean",
          "x-go-name": "Exploit"
        },
        "friendly_name": {
          "description": "FriendlyName for the exclusion type",
          "type": "string",
          "x-go-name": "FriendlyName"
        },
        "id": {
          "description": "Identifier for exclusion",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "malware_protection": {
          "type": "boolean",
          "x-go-name": "Malware"
        },
        "policies": {
          "description": "ExclusionPolicies lists the policies to which the exclusion applies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExclusionPolicy"
          },
          "x-go-name": "ExclusionPolicies"
        },
        "ransomware_protection": {
          "type": "boolean",
          "x-go-name": "Ransomware"
        },
        "suspicious_activity": {
          "type": "boolean",
          "x-go-name": "SuspiciousActivity"
        },
        "type": {
          "description": "Type of exclusion\n\nA value of:\n1: Exclusion for file path\n2: Exclusion for folder path\n3: Exclusion for wildcard path\n4: Exclusion for registry\n5: Exclusion for file extensions",
          "type": "integer",
          "format": "int64",
          "enum": [
            1,
            2,
            3,
            4,
            5
          ],
          "x-go-name": "Type"
        },
        "updated_at": {
          "description": "When exclusion was updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "updated_by": {
          "description": "Email of the user who last updated the exclusion",
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "value": {
          "description": "Value of exclusion",
          "type": "string",
          "x-go-name": "Value"
        },
        "website_protection": {
          "type": "boolean",
          "x-go-name": "Website"
        }
      },
      "x-go-name": "Exclusion",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "featureFlag": {
      "description": "FeatureFlag represents a feature flag",
      "type": "object",
      "properties": {
        "display_name": {
          "description": "Descriptive name for flag",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "state": {
          "description": "Feature Flag state",
          "type": "string",
          "format": "string",
          "x-go-name": "State"
        },
        "tag": {
          "description": "Unique identifying name for this tag",
          "type": "string",
          "x-go-name": "Tag"
        }
      },
      "x-go-name": "FeatureFlag",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "group": {
      "type": "object",
      "title": "Group represents a API group.",
      "properties": {
        "account_id": {
          "description": "Account ID",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "child_group_count": {
          "description": "ChildGroupCount is the number of children this group has (only direct children, not all descendants)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChildGroupCount"
        },
        "id": {
          "description": "Identifier for account",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "is_default": {
          "description": "True if this is the default group",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "machines_count": {
          "description": "Count of machines in the group",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MachinesCount"
        },
        "name": {
          "description": "Name for account",
          "type": "string",
          "x-go-name": "Name"
        },
        "ou_object_id": {
          "description": "OU Object ID",
          "type": "string",
          "x-go-name": "OUObjectID"
        },
        "parent_id": {
          "description": "ID of the group's parent group",
          "type": "string",
          "x-go-name": "ParentID"
        },
        "policy_id": {
          "description": "ID of policy for group",
          "type": "string",
          "x-go-name": "PolicyID"
        },
        "policy_name": {
          "description": "Name of policy for group",
          "type": "string",
          "x-go-name": "PolicyName"
        },
        "root_id": {
          "description": "ID of the group's parent group",
          "type": "string",
          "x-go-name": "RootID"
        },
        "schedule_ids": {
          "description": "List of IDs associated with the group",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ScheduleIDs"
        },
        "updated_at": {
          "description": "Last update to this group",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "Group",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "healthCheck": {
      "description": "HealthCheck is the response from the health/check API",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Status of the checked API",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "HealthCheck",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "idpDetails": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "x-go-name": "EntityID"
        },
        "metadata": {
          "type": "string",
          "x-go-name": "Metadata"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "impersonationUrl": {
      "description": "ImpersonationToken is used to give a sovereign user access to a given user",
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/apiToken"
        },
        "url": {
          "description": "url to redirect to, includes the token from Token",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-name": "ImpersonationToken",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "innerError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Code numeric error code",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Code"
        },
        "hexcode": {
          "description": "HexCode is code in hex",
          "type": "string",
          "x-go-name": "HexCode"
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/utils/httputil"
    },
    "installer": {
      "type": "object",
      "title": "Installer represents a API custom installer.",
      "properties": {
        "error_msg": {
          "description": "Error assosiated with the installer generation. Only populated if Status == 3 (Error)",
          "type": "string",
          "x-go-name": "ErrorMsg"
        },
        "id": {
          "description": "Identifier for installer",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "status": {
          "description": "Status of installer\n\nA value of:\n1: Pending\n2: Success\n3: Error",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        },
        "type": {
          "description": "Type of installer",
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "description": "Version of installer",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "Installer",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "job": {
      "type": "object",
      "title": "Job represents an API job queue item.",
      "properties": {
        "command": {
          "description": "Command for the job",
          "type": "string",
          "x-go-name": "Command"
        },
        "data": {
          "description": "Data passed along with the job",
          "type": "string",
          "x-go-name": "Data"
        },
        "expires_at": {
          "description": "When the job expires",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "group_name": {
          "description": "The name of the group the machine belongs to",
          "type": "string",
          "x-go-name": "GroupName"
        },
        "id": {
          "description": "Job identifier",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "issued_at": {
          "description": "When the job was created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "issued_by": {
          "description": "ID of the job's issuer",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "IssuedBy"
        },
        "issued_by_email": {
          "description": "Email of the job's issuer",
          "type": "string",
          "format": "email",
          "x-go-name": "IssuedByEmail"
        },
        "issued_by_name": {
          "description": "Name of the job's issuer",
          "type": "string",
          "x-go-name": "IssuedByName"
        },
        "machine_id": {
          "description": "Identifier of the job's machine",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "MachineID"
        },
        "machine_name": {
          "description": "Name of the job's machine",
          "type": "string",
          "x-go-name": "MachineName"
        },
        "policy_name": {
          "description": "The name of the policy the machine belongs to",
          "type": "string",
          "x-go-name": "PolicyName"
        },
        "relay_state": {
          "description": "TODO: The endpoint is also using \"Status\" is their struct field name.\nMaybe we should just call it \"status\" in JSON, as well.\nTODO: enum\nRelay state for this job",
          "type": "string",
          "x-go-name": "RelayState"
        },
        "scan_id": {
          "description": "The ID of the associated scan, if one exists",
          "type": "string",
          "x-go-name": "ScanID"
        },
        "state": {
          "description": "Job's status",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Status"
        },
        "updated_at": {
          "description": "When the job was last updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "Job",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "jobCollectionPresenter": {
      "description": "JobCollectionPresenter represents a collection of Jobs and total count of Jobs",
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/job"
          },
          "x-go-name": "Jobs"
        },
        "total_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "JobCollectionPresenter",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "jobDashboardSummary": {
      "description": "JobDashboardSummary represents the current status of jobs for the endpoints",
      "type": "object",
      "properties": {
        "failed": {
          "description": "Count of failed jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Failed"
        },
        "pending": {
          "description": "Count of pending jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Pending"
        },
        "success": {
          "description": "Count of successful jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Success"
        },
        "timed_out": {
          "description": "Count of timed out jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TimedOut"
        }
      },
      "x-go-name": "JobDashboardSummary",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "jobReport": {
      "description": "JobReport represents an API job queue item for reports",
      "type": "object",
      "properties": {
        "CreatedAtLocal": {
          "$ref": "#/definitions/LocalizableTime"
        },
        "ExpiresAtLocal": {
          "$ref": "#/definitions/LocalizableTime"
        },
        "UpdatedAtLocal": {
          "$ref": "#/definitions/LocalizableTime"
        },
        "command": {
          "description": "Command for the job",
          "type": "string",
          "x-go-name": "Command"
        },
        "data": {
          "description": "Data passed along with the job",
          "type": "string",
          "x-go-name": "Data"
        },
        "expires_at": {
          "description": "When the job expires",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "group_name": {
          "description": "The name of the group the machine belongs to",
          "type": "string",
          "x-go-name": "GroupName"
        },
        "id": {
          "description": "Job identifier",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "issued_at": {
          "description": "When the job was created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "issued_by": {
          "description": "ID of the job's issuer",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "IssuedBy"
        },
        "issued_by_email": {
          "description": "Email of the job's issuer",
          "type": "string",
          "format": "email",
          "x-go-name": "IssuedByEmail"
        },
        "issued_by_name": {
          "description": "Name of the job's issuer",
          "type": "string",
          "x-go-name": "IssuedByName"
        },
        "machine_id": {
          "description": "Identifier of the job's machine",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "MachineID"
        },
        "machine_name": {
          "description": "Name of the job's machine",
          "type": "string",
          "x-go-name": "MachineName"
        },
        "policy_name": {
          "description": "The name of the policy the machine belongs to",
          "type": "string",
          "x-go-name": "PolicyName"
        },
        "relay_state": {
          "description": "TODO: The endpoint is also using \"Status\" is their struct field name.\nMaybe we should just call it \"status\" in JSON, as well.\nTODO: enum\nRelay state for this job",
          "type": "string",
          "x-go-name": "RelayState"
        },
        "scan_id": {
          "description": "The ID of the associated scan, if one exists",
          "type": "string",
          "x-go-name": "ScanID"
        },
        "state": {
          "description": "Job's status",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Status"
        },
        "updated_at": {
          "description": "When the job was last updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "JobReport",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "jobSummary": {
      "description": "JobSummary represents the current status of jobs for the endpoints",
      "type": "object",
      "properties": {
        "failed": {
          "description": "Count of failed jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Failed"
        },
        "pending": {
          "description": "Count of pending jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Pending"
        },
        "processing": {
          "description": "Count of processing jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Processing"
        },
        "success": {
          "description": "Count of successful jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Success"
        },
        "timed_out": {
          "description": "Count of timed out jobs",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TimedOut"
        }
      },
      "x-go-name": "JobSummary",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "jobSummaryRequest": {
      "description": "JobSummary represents the current status of jobs for the endpoints",
      "type": "object",
      "properties": {
        "jobs": {
          "description": "Jobs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobMachineMapping"
          },
          "x-go-name": "Result"
        },
        "total_count": {
          "description": "totalCount",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "CreateJobSummary",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "login": {
      "description": "Login is the API response on successful login",
      "type": "object",
      "properties": {
        "account_id": {
          "description": "User's account ID",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "all_groups_access": {
          "description": "Flag indicating whether user has access to all groups in account",
          "type": "boolean",
          "x-go-name": "AllGroupsAccess"
        },
        "display_name": {
          "description": "User's name",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "email": {
          "description": "User's email address",
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "feature_flags": {
          "description": "Enabled Feature flags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FeatureFlags"
        },
        "group_ids": {
          "description": "List of groups user has access to",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "GroupIDs"
        },
        "impersonation_authorized_until": {
          "description": "Time impersonation is authorized until",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ImpersonationAuthorizedUntil"
        },
        "mode": {
          "description": "Flag indicating mode of login which can be one of these `support`, `impersonation`, nil",
          "type": "string",
          "x-go-name": "Mode"
        },
        "otp_enabled": {
          "description": "Boolean indicating if OTP is enabled for the user",
          "type": "boolean",
          "x-go-name": "OTPEnabled"
        },
        "previous_login_at": {
          "description": "PreviousLoginAt timestamp for the last login, unless currently logging in, and in that case it's the previous login time\nUsed for welcome banners on the UI",
          "type": "string",
          "format": "date-time",
          "x-go-name": "PreviousLoginAt"
        },
        "role": {
          "description": "Current user's Role",
          "type": "string",
          "x-go-name": "Role"
        },
        "tokens": {
          "$ref": "#/definitions/apiTokens"
        },
        "user_id": {
          "description": "User's ID",
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-name": "Login",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "machine": {
      "type": "object",
      "title": "Machine represents a API machine.",
      "properties": {
        "created_at": {
          "description": "When the machine was created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dhcp_scope_name": {
          "description": "DHCP scope name",
          "type": "string",
          "x-go-name": "DHCPScopeName"
        },
        "domain_name": {
          "description": "name of Domain endpoint is part of",
          "type": "string",
          "x-go-name": "DomainName"
        },
        "engine_version": {
          "description": "Version of the endpoint agent",
          "type": "string",
          "x-go-name": "AgentVersion"
        },
        "fully_qualified_host_name": {
          "description": "fully qualified name for endpoint",
          "type": "string",
          "x-go-name": "FullyQualifiedHostName"
        },
        "group_id": {
          "description": "Identifier for the group the machine belongs to",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "GroupID"
        },
        "group_name": {
          "description": "Name of the group the machine belongs to",
          "type": "string",
          "x-go-name": "GroupName"
        },
        "host_name": {
          "description": "Endpoint host name",
          "type": "string",
          "x-go-name": "HostName"
        },
        "id": {
          "description": "Machine identifier",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "last_seen_at": {
          "description": "When the machine last checked in",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastSeenAt"
        },
        "marked_for_deletion": {
          "description": "When the machine was marked for deletion",
          "type": "string",
          "format": "date-time",
          "x-go-name": "MarkedForDeletion"
        },
        "name": {
          "description": "Name of the machine",
          "type": "string",
          "x-go-name": "Name"
        },
        "nics": {
          "description": "Enpoint network card collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NIC"
          },
          "x-go-name": "NICs"
        },
        "object_guid": {
          "description": "Active Directory GUID",
          "type": "string",
          "x-go-name": "ADObjectGUID"
        },
        "object_sid": {
          "description": "Active Directory SID",
          "type": "string",
          "x-go-name": "ADObjectSID"
        },
        "online": {
          "description": "True if the machine has been online within the online window",
          "type": "boolean",
          "x-go-name": "Online"
        },
        "os_architecture": {
          "description": "Machine's OS Architecture",
          "type": "string",
          "x-go-name": "OSArchitecture"
        },
        "os_platform": {
          "description": "Machine's OS Platform",
          "type": "string",
          "x-go-name": "OSPlatform"
        },
        "os_release_name": {
          "description": "Machine's release name",
          "type": "string",
          "x-go-name": "OSReleaseName"
        },
        "policy_id": {
          "description": "Identifier for the policy applied to the machine",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "PolicyID"
        },
        "policy_name": {
          "description": "Name of the policy applied to the machine",
          "type": "string",
          "x-go-name": "PolicyName"
        },
        "root_group_id": {
          "description": "ID of the group's parent group",
          "type": "string",
          "x-go-name": "RootGroupID"
        },
        "status": {
          "$ref": "#/definitions/MachineStatus"
        },
        "syslog_proxy_endpoint": {
          "description": "Is this machine a syslog proxy endpoint",
          "type": "boolean",
          "x-go-name": "SyslogProxyEndpoint"
        },
        "updated_at": {
          "description": "When the machine was last updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "uuid": {
          "description": "Machine UUID",
          "type": "string",
          "format": "uuid4",
          "x-go-name": "UUID"
        }
      },
      "x-go-name": "Machine",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "machineCollectionPresenter": {
      "description": "MachineCollectionPresenter represents a collection of Machines and total count of Machines for query",
      "type": "object",
      "properties": {
        "machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/machine"
          },
          "x-go-name": "Machines"
        },
        "total_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "MachineCollectionPresenter",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "machineNetworkInfo": {
      "description": "MachineNetworkInfo is used to return networking info for an endpoint, it is set in agent information",
      "type": "object",
      "properties": {
        "dhcp_scope_name": {
          "description": "DHCP scope name",
          "type": "string",
          "x-go-name": "DHCPScopeName"
        },
        "domain_name": {
          "description": "name of Domain endpoint is part of",
          "type": "string",
          "x-go-name": "DomainName"
        },
        "engine_version": {
          "description": "Version of the endpoint agent",
          "type": "string",
          "x-go-name": "AgentVersion"
        },
        "fully_qualified_host_name": {
          "description": "fully qualified name for endpoint",
          "type": "string",
          "x-go-name": "FullyQualifiedHostName"
        },
        "host_name": {
          "description": "Endpoint host name",
          "type": "string",
          "x-go-name": "HostName"
        },
        "nics": {
          "description": "Enpoint network card collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NIC"
          },
          "x-go-name": "NICs"
        },
        "object_guid": {
          "description": "Active Directory GUID",
          "type": "string",
          "x-go-name": "ADObjectGUID"
        },
        "object_sid": {
          "description": "Active Directory SID",
          "type": "string",
          "x-go-name": "ADObjectSID"
        }
      },
      "x-go-name": "MachineNetworkInfo",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "machineRegister": {
      "description": "MachineRegister is the response used when a machine registers",
      "type": "object",
      "properties": {
        "this_machine": {
          "$ref": "#/definitions/thisMachine"
        },
        "tokens": {
          "$ref": "#/definitions/apiTokens"
        }
      },
      "x-go-name": "MachineRegister",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "machineRemediation": {
      "description": "MachineRemediation paths for remediation for a given remediation job issued to machine",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemediationItem"
          },
          "x-go-name": "Items"
        },
        "job_id": {
          "type": "string",
          "x-go-name": "JobID"
        },
        "machine_id": {
          "type": "string",
          "x-go-name": "MachineID"
        },
        "total_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "MachineRemediation",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "machineSummary": {
      "description": "MachineSummary represents the machine summary",
      "type": "object",
      "properties": {
        "offline": {
          "description": "Count of offline machines",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Offline"
        },
        "offline_seven_days": {
          "description": "Count of machines that have been offline over seven days",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "OfflineSevenDays"
        },
        "online": {
          "description": "Count of online machines",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Online"
        },
        "outdated": {
          "description": "Count of machines that have an outdated agent",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Outdated"
        }
      },
      "x-go-name": "MachineSummary",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "machineUpload": {
      "description": "MachineUpload is a presenter to enable the endpoints to upload to S3",
      "type": "object",
      "properties": {
        "url": {
          "description": "Url is the url to post the upload to",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-name": "MachineUpload",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "me": {
      "description": "Me is basic information provided to an API caller when they ask about their own user",
      "type": "object",
      "properties": {
        "account_id": {
          "description": "User's account ID",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "all_groups_access": {
          "description": "Flag indicating whether user has access to all groups in account",
          "type": "boolean",
          "x-go-name": "AllGroupsAccess"
        },
        "display_name": {
          "description": "User's name",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "email": {
          "description": "User's email address",
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "feature_flags": {
          "description": "Enabled Feature flags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FeatureFlags"
        },
        "group_ids": {
          "description": "List of groups user has access to",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "GroupIDs"
        },
        "impersonation_authorized_until": {
          "description": "Time impersonation is authorized until",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ImpersonationAuthorizedUntil"
        },
        "mode": {
          "description": "Flag indicating mode of login which can be one of these `support`, `impersonation`, nil",
          "type": "string",
          "x-go-name": "Mode"
        },
        "otp_enabled": {
          "description": "OTPEnabled indicates whether 2FA has been set up for the user",
          "type": "boolean",
          "x-go-name": "OTPEnabled"
        },
        "role": {
          "description": "Current user's Role",
          "type": "string",
          "x-go-name": "Role"
        },
        "user_id": {
          "description": "User's ID",
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-name": "Me",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "option": {
      "description": "Option model",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "id": {
          "$ref": "#/definitions/ID"
        },
        "option_name": {
          "type": "string",
          "x-go-name": "OptionName"
        },
        "option_value": {
          "type": "string",
          "x-go-name": "OptionValue"
        },
        "table_id": {
          "$ref": "#/definitions/ID"
        },
        "table_name": {
          "type": "string",
          "x-go-name": "TableName"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "Option",
      "x-go-package": "github.mb-internal.com/nebula/retina/model"
    },
    "osSummary": {
      "description": "OSSummary represents the os summary",
      "type": "object",
      "properties": {
        "android": {
          "description": "Count of endpoints running Android",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Android"
        },
        "ios": {
          "description": "Count of endpoints running iOS",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Ios"
        },
        "linux": {
          "description": "Count of endpoints running Linux",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Linux"
        },
        "osx": {
          "description": "Count of endpoints running OS X",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Macos"
        },
        "windows": {
          "description": "Count of endpoints running Windows",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Windows"
        }
      },
      "x-go-name": "OSSummary",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "otpSecret": {
      "description": "OTPSecret is used to give a user their OTP secret (for 2FA)",
      "type": "object",
      "properties": {
        "url": {
          "description": "Secret used for OTP",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-name": "OTPSecret",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "ping": {
      "description": "Ping is the response from the health/ping API",
      "type": "object",
      "required": [
        "pong"
      ],
      "properties": {
        "pong": {
          "description": "Ping pong",
          "type": "string",
          "pattern": "pong",
          "x-go-name": "Pong"
        }
      },
      "x-go-name": "Ping",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "policy": {
      "type": "object",
      "title": "Policy represents a API policy.",
      "properties": {
        "account_id": {
          "description": "Account ID",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "contents": {
          "description": "JSON string representing the policy details",
          "type": "string",
          "x-go-name": "Contents"
        },
        "created_at": {
          "description": "Date policy was created at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deny_edit": {
          "description": "True if the current user has insufficient access to edit this policy",
          "type": "boolean",
          "x-go-name": "DenyEdit"
        },
        "etag": {
          "description": "ETag for policy",
          "type": "string",
          "x-go-name": "ETag"
        },
        "exclusions": {
          "description": "Exclusions applied to this policy",
          "type": "array",
          "items": {
            "$ref": "#/definitions/exclusion"
          },
          "x-go-name": "Exclusions"
        },
        "groups": {
          "description": "Groups this policy is applied to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/group"
          },
          "x-go-name": "Groups"
        },
        "id": {
          "description": "Identifier for policy",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "is_default": {
          "description": "True if this policy is the default",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "modified_by": {
          "description": "User ID last modified by",
          "type": "string",
          "x-go-name": "ModifiedBy"
        },
        "name": {
          "description": "Policy's name",
          "type": "string",
          "x-go-name": "Name"
        },
        "updated_at": {
          "description": "Date policy was updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "Policy",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "preference": {
      "description": "Preference represents a user preference",
      "type": "object",
      "properties": {
        "category": {
          "description": "Category for preference",
          "type": "string",
          "x-go-name": "Category"
        },
        "name": {
          "description": "Name of preference",
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "description": "Value of preference",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-name": "Preference",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "quarantinedThreatCollectionPresenter": {
      "description": "QuarantinedThreatCollectionPresenter represents a collection of QuarantinedThreats and total count of Quarantined Threats",
      "type": "object",
      "properties": {
        "quarantined_threats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/threatTrace"
          },
          "x-go-name": "QuarantinedThreats"
        },
        "total_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "QuarantinedThreatCollectionPresenter",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "schedule": {
      "description": "Schedule represents a API schedule",
      "type": "object",
      "properties": {
        "command": {
          "description": "Command to run",
          "type": "string",
          "x-go-name": "Command"
        },
        "command_data": {
          "description": "Data to pass to command",
          "type": "string",
          "format": "json",
          "x-go-name": "CommandData"
        },
        "created_at": {
          "description": "Date created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "enabled": {
          "description": "True if enabled",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "etag": {
          "description": "Etag for quick cache invalidations",
          "type": "string",
          "x-go-name": "Etag"
        },
        "group_ids": {
          "description": "IDs to apply the rule to",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "GroupIDs"
        },
        "id": {
          "description": "Identifier for schedule",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "name": {
          "description": "Schedule name",
          "type": "string",
          "x-go-name": "Name"
        },
        "recover": {
          "description": "Recover from missed scheduled items",
          "type": "boolean",
          "x-go-name": "Recover"
        },
        "rrule": {
          "description": "Recurrance rule",
          "type": "string",
          "format": "rrule",
          "x-go-name": "RRule"
        },
        "updated_at": {
          "description": "Date last updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "Schedule",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "scheduleListItem": {
      "description": "scheduleListItem is the identifying information of a schedule in the json",
      "type": "object",
      "properties": {
        "etag": {
          "description": "Etag of the schedule. If this changes, re-fetch the schedule",
          "type": "string",
          "x-go-name": "ScheduleEtag"
        },
        "id": {
          "description": "Identifier of the schedule",
          "type": "string",
          "x-go-name": "ScheduleID"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "serviceProviderDetails": {
      "type": "object",
      "properties": {
        "assertion_consumer_service_url": {
          "type": "string",
          "x-go-name": "AssertionConsumerServiceURL"
        },
        "attribute_name_format": {
          "type": "string",
          "x-go-name": "AttributeNameFormat"
        },
        "binding": {
          "type": "string",
          "x-go-name": "Binding"
        },
        "name_id_format": {
          "type": "string",
          "x-go-name": "NameIDFormat"
        },
        "service_provider_entity_id": {
          "type": "string",
          "x-go-name": "ServiceProviderEntityID"
        },
        "service_provider_metadata": {
          "type": "string",
          "x-go-name": "ServiceProviderMetadata"
        },
        "solicited_whitelist_url": {
          "type": "string",
          "x-go-name": "SolicitedWhitelistURL"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "sync": {
      "description": "MachineSync represents the data returned to the agent when it polls on machine/sync",
      "type": "object",
      "properties": {
        "account_id": {
          "description": "AccountID Account identifier of account this machine belongs to",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "boomerang_endpoint": {
          "description": "Boomerang endpoint to use",
          "type": "string",
          "format": "url",
          "x-go-name": "BoomerangEndpoint"
        },
        "exclusions_etag": {
          "description": "Etag of the machine's exclusions. If this changes, re-fetch the exclusions",
          "type": "string",
          "x-go-name": "ExclusionsEtag"
        },
        "group_id": {
          "description": "GroupID Group identifier of the group that this machine belongs to",
          "type": "string",
          "x-go-name": "GroupID"
        },
        "id": {
          "description": "Identifier for this machine",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "jobs": {
          "description": "list of jobs to run",
          "type": "array",
          "items": {
            "$ref": "#/definitions/job"
          },
          "x-go-name": "Jobs"
        },
        "marked_for_deletion": {
          "description": "True if this endpoint needs to be uninstalled",
          "type": "boolean",
          "x-go-name": "MarkedForDeletion"
        },
        "policy_etag": {
          "description": "Etag of the machine's policy. If this changes, re-fetch the policy",
          "type": "string",
          "x-go-name": "PolicyEtag"
        },
        "policy_id": {
          "description": "PolicyID Identifier for the policy that applies to this machine",
          "type": "string",
          "x-go-name": "PolicyID"
        },
        "polling_interval_seconds": {
          "description": "Polling interval in seconds, specifies how often to poll this endpoint",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PollingIntervalSeconds"
        },
        "schedules": {
          "description": "Schedules for the machine",
          "type": "array",
          "items": {
            "$ref": "#/definitions/scheduleListItem"
          },
          "x-go-name": "Schedules"
        },
        "uuid": {
          "description": "UUID for the machine provided by the agent",
          "type": "string",
          "format": "uuid4",
          "x-go-name": "UUID"
        }
      },
      "x-go-name": "MachineSync",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "thisMachine": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Nebula identifier of the given machine",
          "type": "string",
          "x-go-name": "ID"
        },
        "uuid": {
          "description": "Unique identifier of the machine generated by the agent",
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatCategoryCount": {
      "description": "ThreatCategory represents the sum of a threat category",
      "type": "object",
      "properties": {
        "category": {
          "description": "Threat Category",
          "type": "string",
          "x-go-name": "Category"
        },
        "count": {
          "description": "Number of threats in category",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        }
      },
      "x-go-name": "ThreatCategory",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatCategoryCounts": {
      "description": "ThreatCategoryCounts represents threat counts broken down by category",
      "type": "object",
      "properties": {
        "ae_count": {
          "description": "Number of AE threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AECount"
        },
        "arw_count": {
          "description": "Number of ARW threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ARWCount"
        },
        "malware_count": {
          "description": "Number of PUP threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MalwareCount"
        },
        "mwac_count": {
          "description": "Number of MWAC threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MWACCount"
        },
        "pum_count": {
          "description": "Number of PUM threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PumCount"
        },
        "pup_count": {
          "description": "Number of PUP threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PupCount"
        }
      },
      "x-go-name": "ThreatCategoryCounts",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatCategoryTimeSeries": {
      "description": "ThreatCategoryTimeSeries is a row of time series data for all malware categories",
      "type": "object",
      "properties": {
        "ae_count": {
          "description": "Number of AE threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AECount"
        },
        "arw_count": {
          "description": "Number of ARW threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ARWCount"
        },
        "date": {
          "description": "Date threats occured",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "malware_count": {
          "description": "Number of PUP threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MalwareCount"
        },
        "mwac_count": {
          "description": "Number of MWAC threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MWACCount"
        },
        "pum_count": {
          "description": "Number of PUM threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PumCount"
        },
        "pup_count": {
          "description": "Number of PUP threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PupCount"
        }
      },
      "x-go-name": "ThreatCategoryTimeSeries",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatCollectionPresenter": {
      "description": "ThreatCollectionPresenter represents a collection of ThreatTraces and total count of Threats for account",
      "type": "object",
      "properties": {
        "threats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/threatTrace"
          },
          "x-go-name": "Threats"
        },
        "total_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "ThreatCollectionPresenter",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatCount": {
      "description": "ThreatCount represents a count of threats grouped by name",
      "type": "object",
      "properties": {
        "count": {
          "description": "Number of threats with name",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "name": {
          "description": "Threat name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "ThreatCount",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatMachineCount": {
      "description": "ThreatMachine represents the sum of a threat machine",
      "type": "object",
      "properties": {
        "count": {
          "description": "Number of threats in category",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "deleted": {
          "description": "Deleted flag",
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "machine_id": {
          "description": "Id of machine, used for dynamic path building",
          "type": "string",
          "x-go-name": "MachineId"
        },
        "machine_name": {
          "description": "Threat Category",
          "type": "string",
          "x-go-name": "MachineName"
        }
      },
      "x-go-name": "ThreatMachine",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatScanResult": {
      "description": "ThreatScanResult represents the result of a threat scan performed by an endpoint",
      "type": "object",
      "properties": {
        "deleted_count": {
          "description": "The total number of detected threats that were also deleted",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "DeletedCount"
        },
        "duration_seconds": {
          "description": "How long the scan took (in seconds)",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "DurationSeconds"
        },
        "found_count": {
          "description": "The total number of threats that were found (whether an action was taken or not)",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "FoundCount"
        },
        "from_cloud": {
          "description": "True if this scan originated on the cloud",
          "type": "boolean",
          "x-go-name": "FromCloud"
        },
        "id": {
          "description": "The database ID of this scan",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "machine_id": {
          "description": "ID of the machine that reported the scan",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "MachineID"
        },
        "machine_name": {
          "description": "MachineName is the name of the machine that executed the scan",
          "type": "string",
          "x-go-name": "MachineName"
        },
        "metadata": {
          "description": "Metadata contains extra data pertaining to the scan",
          "type": "string",
          "x-go-name": "Metadata"
        },
        "ondemand": {
          "description": "True if this scan was on demand",
          "type": "boolean",
          "x-go-name": "OnDemand"
        },
        "os_platform": {
          "description": "OSPlatform is the is the os platform of the machine that executed the scan",
          "type": "string",
          "x-go-name": "OSPlatform"
        },
        "quarantined_count": {
          "description": "The total number of threats found that were also quarantined",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "QuarantinedCount"
        },
        "reported_at": {
          "description": "RFC3339 timestamp of the time this trace was reported to the server (UTC)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ReportedAt"
        },
        "scan_type": {
          "description": "The type of scan the was done (e.g.: full, quick, custom, etc.)",
          "type": "string",
          "x-go-name": "ScanType"
        },
        "started_at": {
          "description": "RFC3339 timestamp of when the scan started (UTC)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartedAt"
        },
        "started_at_local": {
          "description": "RFC3339 timestamp of when the scan started (machine local time)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartedAtLocal"
        },
        "total_count": {
          "description": "The total number of threats in this result",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-name": "ThreatScanResult",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatScanSummary": {
      "description": "ThreatResultSummary represents the summary of threat scans for a given machine",
      "type": "object",
      "properties": {
        "one_day": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "OneDay"
        },
        "seven_days": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "SevenDays"
        },
        "thirty_days": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ThirtyDays"
        }
      },
      "x-go-name": "ThreatResultSummary",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatTimeSeries": {
      "description": "ThreatTimeSeries is a row (point) in a time series query",
      "type": "object",
      "properties": {
        "count": {
          "description": "Number of threats found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "date": {
          "description": "Date threats occured",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        }
      },
      "x-go-name": "ThreatTimeSeries",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "threatTrace": {
      "description": "ThreatTrace represents a trace for a threat found on a machine",
      "type": "object",
      "properties": {
        "affected_application": {
          "description": "The affected application",
          "type": "string",
          "x-go-name": "AffectedApplication"
        },
        "category": {
          "description": "Category is one of PUP, PUM or Malware",
          "type": "string",
          "x-go-name": "Category"
        },
        "cleaned_at": {
          "description": "RFC3339 timestamp of the time this trace was cleaned, if applicable (UTC)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CleanedAt"
        },
        "correlation_hash": {
          "description": "A hash to allow correlation of the same trace being deteced with the same threat across multiple malwares scans.\nThis is a hash of a combination of:\nThe threat name\nThe threat path (whatever data is available for that based on the threat type)\nThe hash of the content of the infected item",
          "type": "string",
          "x-go-name": "CorrelationHash"
        },
        "detection_id": {
          "description": "The ID of the detection",
          "type": "string",
          "x-go-name": "DetectionID"
        },
        "group_id": {
          "description": "The ID of the group this trace is in",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "GroupID"
        },
        "group_name": {
          "description": "The name of the group this trace is in",
          "type": "string",
          "x-go-name": "GroupName"
        },
        "id": {
          "description": "The database ID of this trace",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ID"
        },
        "ip_address": {
          "description": "The IP address of a blocked website",
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "machine_id": {
          "description": "The ID of the machine that this trace was found on",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "MachineID"
        },
        "machine_name": {
          "description": "The name of the machine that this trace was found on",
          "type": "string",
          "x-go-name": "MachineName"
        },
        "md5": {
          "description": "The exploit's MD5 hash",
          "type": "string",
          "x-go-name": "MD5"
        },
        "parent_detection_id": {
          "description": "The ID of the parent detection",
          "type": "string",
          "x-go-name": "ParentDetectionID"
        },
        "path": {
          "description": "The path to the detected item",
          "type": "string",
          "x-go-name": "Path"
        },
        "policy_id": {
          "description": "The ID of the detection as reported by the endpoint",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "PolicyID"
        },
        "policy_name": {
          "description": "The name of the policy for the group this trace is in",
          "type": "string",
          "x-go-name": "PolicyName"
        },
        "port": {
          "description": "The port of a blocked website",
          "type": "string",
          "x-go-name": "Port"
        },
        "process_name": {
          "description": "ProcessName of the running application",
          "type": "string",
          "x-go-name": "ProcessName"
        },
        "reported_at": {
          "description": "RFC3339 timestamp of the time this trace was reported to the server (UTC)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ReportedAt"
        },
        "scan_id": {
          "description": "The database ID of the scan that found this trace",
          "type": "string",
          "maxLength": 64,
          "x-go-name": "ScanID"
        },
        "scanned_at": {
          "description": "RFC3339 timestamp of the scan that found this trace (UTC)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ScannedAt"
        },
        "scanned_at_local": {
          "description": "RFC3339 timestamp of the scan that found this trace (local machine time)",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ScannedAtLocal"
        },
        "status": {
          "description": "The status of this trace",
          "type": "string",
          "x-go-name": "Status"
        },
        "threat_name": {
          "description": "Name of the threat this trace is infected with",
          "type": "string",
          "x-go-name": "ThreatName"
        },
        "type": {
          "description": "The item type(s)\n(e.g.: file, folder, registry key, registry value, process, module etc.)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Type"
        },
        "url": {
          "description": "The URL of a blocked website",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-name": "ThreatTrace",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "url": {
      "description": "InstallerURL represents a installer URL",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-name": "InstallerURL",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "user": {
      "type": "object",
      "title": "User represents a API user.",
      "properties": {
        "account_id": {
          "description": "ID of the account this user belongs to",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "all_groups_access": {
          "description": "Flag indicating whether user has access to all groups in account",
          "type": "boolean",
          "x-go-name": "AllGroupsAccess"
        },
        "display_name": {
          "description": "User's name",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "email": {
          "description": "User's email address",
          "type": "string",
          "format": "email",
          "x-go-name": "Email"
        },
        "group_ids": {
          "description": "List of groups user has access to",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "GroupIDs"
        },
        "id": {
          "description": "User's ID",
          "type": "string",
          "x-go-name": "ID"
        },
        "impersonation_authorized_until": {
          "description": "Time impersonation is authorized until",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ImpersonationAuthorizedUntil"
        },
        "last_login_at": {
          "description": "User's last login time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastLoginAt"
        },
        "otp_enabled": {
          "description": "OTPEnabled indicates whether 2FA has been set up for the user",
          "type": "boolean",
          "x-go-name": "OTPEnabled"
        },
        "role": {
          "description": "User's role",
          "type": "string",
          "x-go-name": "Role"
        },
        "unconfirmed_email": {
          "description": "If the user has an unconfirmed email, it will be returned here until\nconfirmed",
          "type": "string",
          "format": "email",
          "x-go-name": "UnconfirmedEmail"
        }
      },
      "x-go-name": "User",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "validateMachineAuthToken": {
      "description": "ValidateMachineAuthToken is the API response on succesful token validation",
      "type": "object",
      "properties": {
        "account_id": {
          "description": "AccountID id of account machine belongs to",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "machine_id": {
          "description": "MachineID id of Machine issuing request",
          "type": "string",
          "x-go-name": "MachineID"
        }
      },
      "x-go-name": "ValidateMachineAuthToken",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "validateUserAuthToken": {
      "description": "ValidateUserAuthToken is the API response on successful token validation",
      "type": "object",
      "properties": {
        "account_id": {
          "description": "AccountID id of account user belongs to",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "user_id": {
          "description": "UserID id of user issuing request",
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-name": "ValidateUserAuthToken",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    },
    "websiteCountWithTotal": {
      "description": "WebsiteCounts represents counts of websites with a total",
      "type": "object",
      "properties": {
        "count": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebsiteCount"
          },
          "x-go-name": "Counts"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "WebsiteCounts",
      "x-go-package": "github.mb-internal.com/nebula/retina/presenters"
    }
  },
  "responses": {
    "DeprecatedAccountInstallerCollection": {
      "headers": {
        "dnd_tool_url": {
          "type": "string"
        },
        "installers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeprecatedInstaller"
          }
        }
      }
    },
    "httpError": {
      "description": "Returned with error responses",
      "schema": {
        "$ref": "#/definitions/apiErrors"
      },
      "headers": {
        "Status": {
          "type": "integer",
          "format": "int64",
          "description": "HTTP Status"
        }
      }
    },
    "identityProvider": {
      "headers": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean"
        },
        "entity_id": {
          "type": "string"
        },
        "jit_provisioning": {
          "type": "boolean"
        },
        "metadata": {
          "type": "string"
        },
        "signing_certs": {
          "type": "string"
        },
        "single_logout_service_location": {
          "type": "string"
        },
        "single_sign_on_service_location": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "strict_mode": {
          "type": "boolean"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "machineExclusions": {
      "description": "ExclusionMachineViewCollection represents a collection of API exclusions, presented to the endpoint.",
      "headers": {
        "exclusions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExclusionMachineView"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "nil": {
      "description": "NilResponse is a response that doesn't have anything with it.\nIt exists to make swagger happy"
    },
    "report": {
      "description": "Report represents a Report",
      "schema": {
        "$ref": "#/definitions/ReportRecurrence"
      },
      "headers": {
        "account_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_by": {
          "type": "string"
        },
        "created_by_user": {
          "type": "string"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "last_generation_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "next_generation_at": {
          "type": "string",
          "format": "date-time"
        },
        "period": {
          "type": "integer",
          "format": "int64"
        },
        "recurrence": {},
        "time_zone": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "units": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "reports": {
      "description": "Reports represents a collection of Reports",
      "headers": {
        "reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Report"
          }
        }
      }
    },
    "supportUrl": {
      "schema": {
        "$ref": "#/definitions/apiToken"
      },
      "headers": {
        "token": {
          "description": "Token for Support User"
        },
        "url": {
          "type": "string",
          "description": "url to redirect to, includes the token from Token"
        }
      }
    },
    "urlPresenter": {
      "headers": {
        "url": {
          "type": "string"
        }
      }
    }
  }
}
